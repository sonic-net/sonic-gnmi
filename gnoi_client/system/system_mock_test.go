// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openconfig/gnoi/system (interfaces: SystemClient,System_SetPackageClient)

// Package system is a generated GoMock package.
package system

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	system "github.com/openconfig/gnoi/system"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockSystemClient is a mock of SystemClient interface
type MockSystemClient struct {
	ctrl     *gomock.Controller
	recorder *MockSystemClientMockRecorder
}

// MockSystemClientMockRecorder is the mock recorder for MockSystemClient
type MockSystemClientMockRecorder struct {
	mock *MockSystemClient
}

// NewMockSystemClient creates a new mock instance
func NewMockSystemClient(ctrl *gomock.Controller) *MockSystemClient {
	mock := &MockSystemClient{ctrl: ctrl}
	mock.recorder = &MockSystemClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSystemClient) EXPECT() *MockSystemClientMockRecorder {
	return m.recorder
}

// CancelReboot mocks base method
func (m *MockSystemClient) CancelReboot(arg0 context.Context, arg1 *system.CancelRebootRequest, arg2 ...grpc.CallOption) (*system.CancelRebootResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelReboot", varargs...)
	ret0, _ := ret[0].(*system.CancelRebootResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelReboot indicates an expected call of CancelReboot
func (mr *MockSystemClientMockRecorder) CancelReboot(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelReboot", reflect.TypeOf((*MockSystemClient)(nil).CancelReboot), varargs...)
}

// KillProcess mocks base method
func (m *MockSystemClient) KillProcess(arg0 context.Context, arg1 *system.KillProcessRequest, arg2 ...grpc.CallOption) (*system.KillProcessResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "KillProcess", varargs...)
	ret0, _ := ret[0].(*system.KillProcessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KillProcess indicates an expected call of KillProcess
func (mr *MockSystemClientMockRecorder) KillProcess(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KillProcess", reflect.TypeOf((*MockSystemClient)(nil).KillProcess), varargs...)
}

// Ping mocks base method
func (m *MockSystemClient) Ping(arg0 context.Context, arg1 *system.PingRequest, arg2 ...grpc.CallOption) (system.System_PingClient, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(system.System_PingClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping
func (mr *MockSystemClientMockRecorder) Ping(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockSystemClient)(nil).Ping), varargs...)
}

// Reboot mocks base method
func (m *MockSystemClient) Reboot(arg0 context.Context, arg1 *system.RebootRequest, arg2 ...grpc.CallOption) (*system.RebootResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Reboot", varargs...)
	ret0, _ := ret[0].(*system.RebootResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reboot indicates an expected call of Reboot
func (mr *MockSystemClientMockRecorder) Reboot(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reboot", reflect.TypeOf((*MockSystemClient)(nil).Reboot), varargs...)
}

// RebootStatus mocks base method
func (m *MockSystemClient) RebootStatus(arg0 context.Context, arg1 *system.RebootStatusRequest, arg2 ...grpc.CallOption) (*system.RebootStatusResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RebootStatus", varargs...)
	ret0, _ := ret[0].(*system.RebootStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebootStatus indicates an expected call of RebootStatus
func (mr *MockSystemClientMockRecorder) RebootStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootStatus", reflect.TypeOf((*MockSystemClient)(nil).RebootStatus), varargs...)
}

// SetPackage mocks base method
func (m *MockSystemClient) SetPackage(arg0 context.Context, arg1 ...grpc.CallOption) (system.System_SetPackageClient, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetPackage", varargs...)
	ret0, _ := ret[0].(system.System_SetPackageClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPackage indicates an expected call of SetPackage
func (mr *MockSystemClientMockRecorder) SetPackage(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPackage", reflect.TypeOf((*MockSystemClient)(nil).SetPackage), varargs...)
}

// SwitchControlProcessor mocks base method
func (m *MockSystemClient) SwitchControlProcessor(arg0 context.Context, arg1 *system.SwitchControlProcessorRequest, arg2 ...grpc.CallOption) (*system.SwitchControlProcessorResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SwitchControlProcessor", varargs...)
	ret0, _ := ret[0].(*system.SwitchControlProcessorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwitchControlProcessor indicates an expected call of SwitchControlProcessor
func (mr *MockSystemClientMockRecorder) SwitchControlProcessor(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchControlProcessor", reflect.TypeOf((*MockSystemClient)(nil).SwitchControlProcessor), varargs...)
}

// Time mocks base method
func (m *MockSystemClient) Time(arg0 context.Context, arg1 *system.TimeRequest, arg2 ...grpc.CallOption) (*system.TimeResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Time", varargs...)
	ret0, _ := ret[0].(*system.TimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Time indicates an expected call of Time
func (mr *MockSystemClientMockRecorder) Time(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Time", reflect.TypeOf((*MockSystemClient)(nil).Time), varargs...)
}

// Traceroute mocks base method
func (m *MockSystemClient) Traceroute(arg0 context.Context, arg1 *system.TracerouteRequest, arg2 ...grpc.CallOption) (system.System_TracerouteClient, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Traceroute", varargs...)
	ret0, _ := ret[0].(system.System_TracerouteClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Traceroute indicates an expected call of Traceroute
func (mr *MockSystemClientMockRecorder) Traceroute(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Traceroute", reflect.TypeOf((*MockSystemClient)(nil).Traceroute), varargs...)
}

// MockSystem_SetPackageClient is a mock of System_SetPackageClient interface
type MockSystem_SetPackageClient struct {
	ctrl     *gomock.Controller
	recorder *MockSystem_SetPackageClientMockRecorder
}

// MockSystem_SetPackageClientMockRecorder is the mock recorder for MockSystem_SetPackageClient
type MockSystem_SetPackageClientMockRecorder struct {
	mock *MockSystem_SetPackageClient
}

// NewMockSystem_SetPackageClient creates a new mock instance
func NewMockSystem_SetPackageClient(ctrl *gomock.Controller) *MockSystem_SetPackageClient {
	mock := &MockSystem_SetPackageClient{ctrl: ctrl}
	mock.recorder = &MockSystem_SetPackageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSystem_SetPackageClient) EXPECT() *MockSystem_SetPackageClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method
func (m *MockSystem_SetPackageClient) CloseAndRecv() (*system.SetPackageResponse, error) {
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*system.SetPackageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv
func (mr *MockSystem_SetPackageClientMockRecorder) CloseAndRecv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockSystem_SetPackageClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method
func (m *MockSystem_SetPackageClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockSystem_SetPackageClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSystem_SetPackageClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockSystem_SetPackageClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockSystem_SetPackageClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSystem_SetPackageClient)(nil).Context))
}

// Header mocks base method
func (m *MockSystem_SetPackageClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockSystem_SetPackageClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSystem_SetPackageClient)(nil).Header))
}

// RecvMsg mocks base method
func (m *MockSystem_SetPackageClient) RecvMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockSystem_SetPackageClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSystem_SetPackageClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockSystem_SetPackageClient) Send(arg0 *system.SetPackageRequest) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockSystem_SetPackageClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSystem_SetPackageClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (m *MockSystem_SetPackageClient) SendMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockSystem_SetPackageClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSystem_SetPackageClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockSystem_SetPackageClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockSystem_SetPackageClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSystem_SetPackageClient)(nil).Trailer))
}
