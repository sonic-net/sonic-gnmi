From c4660f5f1a5c38902c374f002174848aff2f1739 Sat Aug 18 00:00:00 2018
From: Jipanyang <jipan.yang@alibaba-inc.com>
Date: Sat, 18 Aug 2018 00:00:00 +0000
Subject: [PATCH] Used local gnmi client update to avoid json (value.ToScalar()) parsing issue

---
 vendor/github.com/openconfig/gnmi/client/gnmi/client.go  | 13 +++-
 vendor/github.com/openconfig/gnmi/value/value.go		  | 2 +
 2 files changed, 49 insertions(+), 2 deletions(-)

diff --git a/vendor/github.com/openconfig/gnmi/client/gnmi/client.go b/vendor/github.com/openconfig/gnmi/client/gnmi/client.go
index 81a8704..ca0a383 100644
--- a/vendor/github.com//openconfig/gnmi/client/gnmi/client.go	2018-8-17 14:03:29.839103602 -0800
+++ b/vendor/github.com//openconfig/gnmi/client/gnmi/client.go	2018-8-18 13:48:49.226145599 -0700
@@ -37,7 +37,6 @@
 	"github.com/openconfig/gnmi/client"
 	"github.com/openconfig/gnmi/client/grpcutil"
 	"github.com/openconfig/gnmi/path"
-	"github.com/openconfig/gnmi/value"
 
 	gpb "github.com/openconfig/gnmi/proto/gnmi"
 )
@@ -257,11 +256,58 @@
 		if err != nil {
 			return nil, fmt.Errorf("invalid query path %q: %v", qq, err)
 		}
 		s.Subscribe.Subscription = append(s.Subscribe.Subscription, &gpb.Subscription{Path: pp, Mode: q.Streaming_type, SampleInterval: q.Streaming_sample_int, HeartbeatInterval: q.Heartbeat_int, SuppressRedundant: q.Suppress_redundant})
 	}
 	return &gpb.SubscribeRequest{Request: s}, nil
 }
 
+// decimalToFloat converts a *gnmi_proto.Decimal64 to a float32. Downcasting to float32 is performed as the
+// precision of a float64 is not required.
+func decimalToFloat(d *gpb.Decimal64) float32 {
+	return float32(float64(d.Digits) / math.Pow(10, float64(d.Precision)))
+}
+
+// ToScalar will convert TypedValue scalar types to a Go native type. It will
+// return an error if the TypedValue does not contain a scalar type.
+func toScalar(tv *gpb.TypedValue) (interface{}, error) {
+	var i interface{}
+	switch tv.Value.(type) {
+	case *gpb.TypedValue_DecimalVal:
+		i = decimalToFloat(tv.GetDecimalVal())
+	case *gpb.TypedValue_StringVal:
+		i = tv.GetStringVal()
+	case *gpb.TypedValue_IntVal:
+		i = tv.GetIntVal()
+	case *gpb.TypedValue_UintVal:
+		i = tv.GetUintVal()
+	case *gpb.TypedValue_BoolVal:
+		i = tv.GetBoolVal()
+	case *gpb.TypedValue_FloatVal:
+		i = tv.GetFloatVal()
+	case *gpb.TypedValue_LeaflistVal:
+		elems := tv.GetLeaflistVal().GetElement()
+		ss := make([]interface{}, len(elems))
+		for x, e := range elems {
+			v, err := toScalar(e)
+			if err != nil {
+				return nil, fmt.Errorf("ToScalar for ScalarArray %+v: %v", e.Value, err)
+			}
+			ss[x] = v
+		}
+		i = ss
+	case *gpb.TypedValue_BytesVal:
+		i = tv.GetBytesVal()
+	case *gpb.TypedValue_JsonIetfVal:
+		var val interface{}
+		val = tv.GetJsonIetfVal()
+		json.Unmarshal(val.([]byte), &i)
+		//i = tv.GetJsonIetfVal()
+	default:
+		return nil, fmt.Errorf("non-scalar type %+v", tv.Value)
+	}
+	return i, nil
+}
+
 func noti(prefix []string, pp *gpb.Path, ts time.Time, u *gpb.Update) (client.Notification, error) {
 	sp := path.ToStrings(pp, false)
 	// Make a full new copy of prefix + u.Path to avoid any reuse of underlying
@@ -274,7 +320,7 @@
 		return client.Delete{Path: p, TS: ts}, nil
 	}
 	if u.Val != nil {
-		val, err := value.ToScalar(u.Val)
+		val, err := toScalar(u.Val)
 		if err != nil {
 			return nil, err
 		}
 
diff --git a/vendor/github.com/openconfig/gnmi/value/value.go b/vendor/github.com/openconfig/gnmi/value/value.go
index e851a4b..6e79264 100644
--- a/vendor/github.com/openconfig/gnmi/value/value.go	2018-8-17 14:03:29.847103498 -0800
+++ b/vendor/github.com/openconfig/gnmi/value/value.go	2018-8-18 13:48:49.234145530 -0700
@@ -117,6 +117,8 @@
 		i = ss
 	case *pb.TypedValue_BytesVal:
 		i = tv.GetBytesVal()
+	case *pb.TypedValue_JsonIetfVal:
+		i = string(tv.GetJsonIetfVal())
 	default:
 		return nil, fmt.Errorf("non-scalar type %+v", tv.Value)
 	}
