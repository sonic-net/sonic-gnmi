// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: proto/firmware_management.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CleanupOldFirmwareRequest is the request to clean up old firmware files
type CleanupOldFirmwareRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CleanupOldFirmwareRequest) Reset() {
	*x = CleanupOldFirmwareRequest{}
	mi := &file_proto_firmware_management_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CleanupOldFirmwareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanupOldFirmwareRequest) ProtoMessage() {}

func (x *CleanupOldFirmwareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_firmware_management_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanupOldFirmwareRequest.ProtoReflect.Descriptor instead.
func (*CleanupOldFirmwareRequest) Descriptor() ([]byte, []int) {
	return file_proto_firmware_management_proto_rawDescGZIP(), []int{0}
}

// CleanupOldFirmwareResponse contains the result of the cleanup operation
type CleanupOldFirmwareResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Number of files that were successfully deleted
	FilesDeleted int32 `protobuf:"varint,1,opt,name=files_deleted,json=filesDeleted,proto3" json:"files_deleted,omitempty"`
	// List of files that were deleted
	DeletedFiles []string `protobuf:"bytes,2,rep,name=deleted_files,json=deletedFiles,proto3" json:"deleted_files,omitempty"`
	// Any errors encountered during cleanup (non-fatal)
	Errors []string `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
	// Total space freed in bytes
	SpaceFreedBytes int64 `protobuf:"varint,4,opt,name=space_freed_bytes,json=spaceFreedBytes,proto3" json:"space_freed_bytes,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CleanupOldFirmwareResponse) Reset() {
	*x = CleanupOldFirmwareResponse{}
	mi := &file_proto_firmware_management_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CleanupOldFirmwareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanupOldFirmwareResponse) ProtoMessage() {}

func (x *CleanupOldFirmwareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_firmware_management_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanupOldFirmwareResponse.ProtoReflect.Descriptor instead.
func (*CleanupOldFirmwareResponse) Descriptor() ([]byte, []int) {
	return file_proto_firmware_management_proto_rawDescGZIP(), []int{1}
}

func (x *CleanupOldFirmwareResponse) GetFilesDeleted() int32 {
	if x != nil {
		return x.FilesDeleted
	}
	return 0
}

func (x *CleanupOldFirmwareResponse) GetDeletedFiles() []string {
	if x != nil {
		return x.DeletedFiles
	}
	return nil
}

func (x *CleanupOldFirmwareResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *CleanupOldFirmwareResponse) GetSpaceFreedBytes() int64 {
	if x != nil {
		return x.SpaceFreedBytes
	}
	return 0
}

// ListFirmwareImagesRequest is the request to list firmware images
type ListFirmwareImagesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional list of directories to search. If empty, uses default directories (/host, /tmp).
	SearchDirectories []string `protobuf:"bytes,1,rep,name=search_directories,json=searchDirectories,proto3" json:"search_directories,omitempty"`
	// Optional regex pattern to filter firmware versions. Empty string means no filtering.
	// Examples: "202311.*", ".*-test.*", "^master\\..*", etc.
	VersionPattern string `protobuf:"bytes,2,opt,name=version_pattern,json=versionPattern,proto3" json:"version_pattern,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListFirmwareImagesRequest) Reset() {
	*x = ListFirmwareImagesRequest{}
	mi := &file_proto_firmware_management_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFirmwareImagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFirmwareImagesRequest) ProtoMessage() {}

func (x *ListFirmwareImagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_firmware_management_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFirmwareImagesRequest.ProtoReflect.Descriptor instead.
func (*ListFirmwareImagesRequest) Descriptor() ([]byte, []int) {
	return file_proto_firmware_management_proto_rawDescGZIP(), []int{2}
}

func (x *ListFirmwareImagesRequest) GetSearchDirectories() []string {
	if x != nil {
		return x.SearchDirectories
	}
	return nil
}

func (x *ListFirmwareImagesRequest) GetVersionPattern() string {
	if x != nil {
		return x.VersionPattern
	}
	return ""
}

// FirmwareImageInfo contains information about a discovered firmware image
type FirmwareImageInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Full path to the firmware image file
	FilePath string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	// Version string extracted from the image
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Full version string with prefix (e.g., "SONiC-OS-202311.1-build123")
	FullVersion string `protobuf:"bytes,3,opt,name=full_version,json=fullVersion,proto3" json:"full_version,omitempty"`
	// Type of image: "onie" for .bin files, "aboot" for .swi files
	ImageType string `protobuf:"bytes,4,opt,name=image_type,json=imageType,proto3" json:"image_type,omitempty"`
	// File size in bytes
	FileSizeBytes int64 `protobuf:"varint,5,opt,name=file_size_bytes,json=fileSizeBytes,proto3" json:"file_size_bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FirmwareImageInfo) Reset() {
	*x = FirmwareImageInfo{}
	mi := &file_proto_firmware_management_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FirmwareImageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareImageInfo) ProtoMessage() {}

func (x *FirmwareImageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_firmware_management_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareImageInfo.ProtoReflect.Descriptor instead.
func (*FirmwareImageInfo) Descriptor() ([]byte, []int) {
	return file_proto_firmware_management_proto_rawDescGZIP(), []int{3}
}

func (x *FirmwareImageInfo) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *FirmwareImageInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *FirmwareImageInfo) GetFullVersion() string {
	if x != nil {
		return x.FullVersion
	}
	return ""
}

func (x *FirmwareImageInfo) GetImageType() string {
	if x != nil {
		return x.ImageType
	}
	return ""
}

func (x *FirmwareImageInfo) GetFileSizeBytes() int64 {
	if x != nil {
		return x.FileSizeBytes
	}
	return 0
}

// ListFirmwareImagesResponse contains the discovered firmware images
type ListFirmwareImagesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of discovered firmware images
	Images []*FirmwareImageInfo `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
	// Any errors encountered during search (non-fatal, search continues)
	Errors        []string `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFirmwareImagesResponse) Reset() {
	*x = ListFirmwareImagesResponse{}
	mi := &file_proto_firmware_management_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFirmwareImagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFirmwareImagesResponse) ProtoMessage() {}

func (x *ListFirmwareImagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_firmware_management_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFirmwareImagesResponse.ProtoReflect.Descriptor instead.
func (*ListFirmwareImagesResponse) Descriptor() ([]byte, []int) {
	return file_proto_firmware_management_proto_rawDescGZIP(), []int{4}
}

func (x *ListFirmwareImagesResponse) GetImages() []*FirmwareImageInfo {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *ListFirmwareImagesResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

// ConsolidateImagesRequest is the request to consolidate SONiC images
type ConsolidateImagesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, only return what would be removed without actually removing anything
	DryRun        bool `protobuf:"varint,1,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsolidateImagesRequest) Reset() {
	*x = ConsolidateImagesRequest{}
	mi := &file_proto_firmware_management_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsolidateImagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsolidateImagesRequest) ProtoMessage() {}

func (x *ConsolidateImagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_firmware_management_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsolidateImagesRequest.ProtoReflect.Descriptor instead.
func (*ConsolidateImagesRequest) Descriptor() ([]byte, []int) {
	return file_proto_firmware_management_proto_rawDescGZIP(), []int{5}
}

func (x *ConsolidateImagesRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

// ConsolidateImagesResponse contains the result of the consolidation operation
type ConsolidateImagesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The current image that was set as default
	CurrentImage string `protobuf:"bytes,1,opt,name=current_image,json=currentImage,proto3" json:"current_image,omitempty"`
	// List of images that were removed (or would be removed in dry_run)
	RemovedImages []string `protobuf:"bytes,2,rep,name=removed_images,json=removedImages,proto3" json:"removed_images,omitempty"`
	// Estimated space freed in bytes (if available)
	SpaceFreedBytes int64 `protobuf:"varint,3,opt,name=space_freed_bytes,json=spaceFreedBytes,proto3" json:"space_freed_bytes,omitempty"`
	// Any warnings or non-fatal errors encountered
	Warnings []string `protobuf:"bytes,4,rep,name=warnings,proto3" json:"warnings,omitempty"`
	// Whether the operation was actually performed (false for dry_run)
	Executed      bool `protobuf:"varint,5,opt,name=executed,proto3" json:"executed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsolidateImagesResponse) Reset() {
	*x = ConsolidateImagesResponse{}
	mi := &file_proto_firmware_management_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsolidateImagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsolidateImagesResponse) ProtoMessage() {}

func (x *ConsolidateImagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_firmware_management_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsolidateImagesResponse.ProtoReflect.Descriptor instead.
func (*ConsolidateImagesResponse) Descriptor() ([]byte, []int) {
	return file_proto_firmware_management_proto_rawDescGZIP(), []int{6}
}

func (x *ConsolidateImagesResponse) GetCurrentImage() string {
	if x != nil {
		return x.CurrentImage
	}
	return ""
}

func (x *ConsolidateImagesResponse) GetRemovedImages() []string {
	if x != nil {
		return x.RemovedImages
	}
	return nil
}

func (x *ConsolidateImagesResponse) GetSpaceFreedBytes() int64 {
	if x != nil {
		return x.SpaceFreedBytes
	}
	return 0
}

func (x *ConsolidateImagesResponse) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *ConsolidateImagesResponse) GetExecuted() bool {
	if x != nil {
		return x.Executed
	}
	return false
}

var File_proto_firmware_management_proto protoreflect.FileDescriptor

const file_proto_firmware_management_proto_rawDesc = "" +
	"\n" +
	"\x1fproto/firmware_management.proto\x12\x05sonic\"\x1b\n" +
	"\x19CleanupOldFirmwareRequest\"\xaa\x01\n" +
	"\x1aCleanupOldFirmwareResponse\x12#\n" +
	"\rfiles_deleted\x18\x01 \x01(\x05R\ffilesDeleted\x12#\n" +
	"\rdeleted_files\x18\x02 \x03(\tR\fdeletedFiles\x12\x16\n" +
	"\x06errors\x18\x03 \x03(\tR\x06errors\x12*\n" +
	"\x11space_freed_bytes\x18\x04 \x01(\x03R\x0fspaceFreedBytes\"s\n" +
	"\x19ListFirmwareImagesRequest\x12-\n" +
	"\x12search_directories\x18\x01 \x03(\tR\x11searchDirectories\x12'\n" +
	"\x0fversion_pattern\x18\x02 \x01(\tR\x0eversionPattern\"\xb4\x01\n" +
	"\x11FirmwareImageInfo\x12\x1b\n" +
	"\tfile_path\x18\x01 \x01(\tR\bfilePath\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12!\n" +
	"\ffull_version\x18\x03 \x01(\tR\vfullVersion\x12\x1d\n" +
	"\n" +
	"image_type\x18\x04 \x01(\tR\timageType\x12&\n" +
	"\x0ffile_size_bytes\x18\x05 \x01(\x03R\rfileSizeBytes\"f\n" +
	"\x1aListFirmwareImagesResponse\x120\n" +
	"\x06images\x18\x01 \x03(\v2\x18.sonic.FirmwareImageInfoR\x06images\x12\x16\n" +
	"\x06errors\x18\x02 \x03(\tR\x06errors\"3\n" +
	"\x18ConsolidateImagesRequest\x12\x17\n" +
	"\adry_run\x18\x01 \x01(\bR\x06dryRun\"\xcb\x01\n" +
	"\x19ConsolidateImagesResponse\x12#\n" +
	"\rcurrent_image\x18\x01 \x01(\tR\fcurrentImage\x12%\n" +
	"\x0eremoved_images\x18\x02 \x03(\tR\rremovedImages\x12*\n" +
	"\x11space_freed_bytes\x18\x03 \x01(\x03R\x0fspaceFreedBytes\x12\x1a\n" +
	"\bwarnings\x18\x04 \x03(\tR\bwarnings\x12\x1a\n" +
	"\bexecuted\x18\x05 \x01(\bR\bexecuted2\xa8\x02\n" +
	"\x12FirmwareManagement\x12[\n" +
	"\x12CleanupOldFirmware\x12 .sonic.CleanupOldFirmwareRequest\x1a!.sonic.CleanupOldFirmwareResponse\"\x00\x12[\n" +
	"\x12ListFirmwareImages\x12 .sonic.ListFirmwareImagesRequest\x1a!.sonic.ListFirmwareImagesResponse\"\x00\x12X\n" +
	"\x11ConsolidateImages\x12\x1f.sonic.ConsolidateImagesRequest\x1a .sonic.ConsolidateImagesResponse\"\x00B7Z5github.com/sonic-net/sonic-gnmi/upgrade-service/protob\x06proto3"

var (
	file_proto_firmware_management_proto_rawDescOnce sync.Once
	file_proto_firmware_management_proto_rawDescData []byte
)

func file_proto_firmware_management_proto_rawDescGZIP() []byte {
	file_proto_firmware_management_proto_rawDescOnce.Do(func() {
		file_proto_firmware_management_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_firmware_management_proto_rawDesc), len(file_proto_firmware_management_proto_rawDesc)))
	})
	return file_proto_firmware_management_proto_rawDescData
}

var file_proto_firmware_management_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_firmware_management_proto_goTypes = []any{
	(*CleanupOldFirmwareRequest)(nil),  // 0: sonic.CleanupOldFirmwareRequest
	(*CleanupOldFirmwareResponse)(nil), // 1: sonic.CleanupOldFirmwareResponse
	(*ListFirmwareImagesRequest)(nil),  // 2: sonic.ListFirmwareImagesRequest
	(*FirmwareImageInfo)(nil),          // 3: sonic.FirmwareImageInfo
	(*ListFirmwareImagesResponse)(nil), // 4: sonic.ListFirmwareImagesResponse
	(*ConsolidateImagesRequest)(nil),   // 5: sonic.ConsolidateImagesRequest
	(*ConsolidateImagesResponse)(nil),  // 6: sonic.ConsolidateImagesResponse
}
var file_proto_firmware_management_proto_depIdxs = []int32{
	3, // 0: sonic.ListFirmwareImagesResponse.images:type_name -> sonic.FirmwareImageInfo
	0, // 1: sonic.FirmwareManagement.CleanupOldFirmware:input_type -> sonic.CleanupOldFirmwareRequest
	2, // 2: sonic.FirmwareManagement.ListFirmwareImages:input_type -> sonic.ListFirmwareImagesRequest
	5, // 3: sonic.FirmwareManagement.ConsolidateImages:input_type -> sonic.ConsolidateImagesRequest
	1, // 4: sonic.FirmwareManagement.CleanupOldFirmware:output_type -> sonic.CleanupOldFirmwareResponse
	4, // 5: sonic.FirmwareManagement.ListFirmwareImages:output_type -> sonic.ListFirmwareImagesResponse
	6, // 6: sonic.FirmwareManagement.ConsolidateImages:output_type -> sonic.ConsolidateImagesResponse
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_firmware_management_proto_init() }
func file_proto_firmware_management_proto_init() {
	if File_proto_firmware_management_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_firmware_management_proto_rawDesc), len(file_proto_firmware_management_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_firmware_management_proto_goTypes,
		DependencyIndexes: file_proto_firmware_management_proto_depIdxs,
		MessageInfos:      file_proto_firmware_management_proto_msgTypes,
	}.Build()
	File_proto_firmware_management_proto = out.File
	file_proto_firmware_management_proto_goTypes = nil
	file_proto_firmware_management_proto_depIdxs = nil
}
