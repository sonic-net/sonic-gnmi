// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: proto/firmware_management.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CleanupOldFirmwareRequest is the request to clean up old firmware files
type CleanupOldFirmwareRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CleanupOldFirmwareRequest) Reset() {
	*x = CleanupOldFirmwareRequest{}
	mi := &file_proto_firmware_management_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CleanupOldFirmwareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanupOldFirmwareRequest) ProtoMessage() {}

func (x *CleanupOldFirmwareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_firmware_management_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanupOldFirmwareRequest.ProtoReflect.Descriptor instead.
func (*CleanupOldFirmwareRequest) Descriptor() ([]byte, []int) {
	return file_proto_firmware_management_proto_rawDescGZIP(), []int{0}
}

// CleanupOldFirmwareResponse contains the result of the cleanup operation
type CleanupOldFirmwareResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Number of files that were successfully deleted
	FilesDeleted int32 `protobuf:"varint,1,opt,name=files_deleted,json=filesDeleted,proto3" json:"files_deleted,omitempty"`
	// List of files that were deleted
	DeletedFiles []string `protobuf:"bytes,2,rep,name=deleted_files,json=deletedFiles,proto3" json:"deleted_files,omitempty"`
	// Any errors encountered during cleanup (non-fatal)
	Errors []string `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
	// Total space freed in bytes
	SpaceFreedBytes int64 `protobuf:"varint,4,opt,name=space_freed_bytes,json=spaceFreedBytes,proto3" json:"space_freed_bytes,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CleanupOldFirmwareResponse) Reset() {
	*x = CleanupOldFirmwareResponse{}
	mi := &file_proto_firmware_management_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CleanupOldFirmwareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanupOldFirmwareResponse) ProtoMessage() {}

func (x *CleanupOldFirmwareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_firmware_management_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanupOldFirmwareResponse.ProtoReflect.Descriptor instead.
func (*CleanupOldFirmwareResponse) Descriptor() ([]byte, []int) {
	return file_proto_firmware_management_proto_rawDescGZIP(), []int{1}
}

func (x *CleanupOldFirmwareResponse) GetFilesDeleted() int32 {
	if x != nil {
		return x.FilesDeleted
	}
	return 0
}

func (x *CleanupOldFirmwareResponse) GetDeletedFiles() []string {
	if x != nil {
		return x.DeletedFiles
	}
	return nil
}

func (x *CleanupOldFirmwareResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *CleanupOldFirmwareResponse) GetSpaceFreedBytes() int64 {
	if x != nil {
		return x.SpaceFreedBytes
	}
	return 0
}

// ListFirmwareImagesRequest is the request to list firmware images
type ListFirmwareImagesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional list of directories to search. If empty, uses default directories (/host, /tmp).
	SearchDirectories []string `protobuf:"bytes,1,rep,name=search_directories,json=searchDirectories,proto3" json:"search_directories,omitempty"`
	// Optional regex pattern to filter firmware versions. Empty string means no filtering.
	// Examples: "202311.*", ".*-test.*", "^master\\..*", etc.
	VersionPattern string `protobuf:"bytes,2,opt,name=version_pattern,json=versionPattern,proto3" json:"version_pattern,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListFirmwareImagesRequest) Reset() {
	*x = ListFirmwareImagesRequest{}
	mi := &file_proto_firmware_management_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFirmwareImagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFirmwareImagesRequest) ProtoMessage() {}

func (x *ListFirmwareImagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_firmware_management_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFirmwareImagesRequest.ProtoReflect.Descriptor instead.
func (*ListFirmwareImagesRequest) Descriptor() ([]byte, []int) {
	return file_proto_firmware_management_proto_rawDescGZIP(), []int{2}
}

func (x *ListFirmwareImagesRequest) GetSearchDirectories() []string {
	if x != nil {
		return x.SearchDirectories
	}
	return nil
}

func (x *ListFirmwareImagesRequest) GetVersionPattern() string {
	if x != nil {
		return x.VersionPattern
	}
	return ""
}

// FirmwareImageInfo contains information about a discovered firmware image
type FirmwareImageInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Full path to the firmware image file
	FilePath string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	// Version string extracted from the image
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Full version string with prefix (e.g., "SONiC-OS-202311.1-build123")
	FullVersion string `protobuf:"bytes,3,opt,name=full_version,json=fullVersion,proto3" json:"full_version,omitempty"`
	// Type of image: "onie" for .bin files, "aboot" for .swi files
	ImageType string `protobuf:"bytes,4,opt,name=image_type,json=imageType,proto3" json:"image_type,omitempty"`
	// File size in bytes
	FileSizeBytes int64 `protobuf:"varint,5,opt,name=file_size_bytes,json=fileSizeBytes,proto3" json:"file_size_bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FirmwareImageInfo) Reset() {
	*x = FirmwareImageInfo{}
	mi := &file_proto_firmware_management_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FirmwareImageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareImageInfo) ProtoMessage() {}

func (x *FirmwareImageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_firmware_management_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareImageInfo.ProtoReflect.Descriptor instead.
func (*FirmwareImageInfo) Descriptor() ([]byte, []int) {
	return file_proto_firmware_management_proto_rawDescGZIP(), []int{3}
}

func (x *FirmwareImageInfo) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *FirmwareImageInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *FirmwareImageInfo) GetFullVersion() string {
	if x != nil {
		return x.FullVersion
	}
	return ""
}

func (x *FirmwareImageInfo) GetImageType() string {
	if x != nil {
		return x.ImageType
	}
	return ""
}

func (x *FirmwareImageInfo) GetFileSizeBytes() int64 {
	if x != nil {
		return x.FileSizeBytes
	}
	return 0
}

// ListFirmwareImagesResponse contains the discovered firmware images
type ListFirmwareImagesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of discovered firmware images
	Images []*FirmwareImageInfo `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
	// Any errors encountered during search (non-fatal, search continues)
	Errors        []string `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFirmwareImagesResponse) Reset() {
	*x = ListFirmwareImagesResponse{}
	mi := &file_proto_firmware_management_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFirmwareImagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFirmwareImagesResponse) ProtoMessage() {}

func (x *ListFirmwareImagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_firmware_management_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFirmwareImagesResponse.ProtoReflect.Descriptor instead.
func (*ListFirmwareImagesResponse) Descriptor() ([]byte, []int) {
	return file_proto_firmware_management_proto_rawDescGZIP(), []int{4}
}

func (x *ListFirmwareImagesResponse) GetImages() []*FirmwareImageInfo {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *ListFirmwareImagesResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

// ConsolidateImagesRequest is the request to consolidate SONiC images
type ConsolidateImagesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, only return what would be removed without actually removing anything
	DryRun        bool `protobuf:"varint,1,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsolidateImagesRequest) Reset() {
	*x = ConsolidateImagesRequest{}
	mi := &file_proto_firmware_management_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsolidateImagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsolidateImagesRequest) ProtoMessage() {}

func (x *ConsolidateImagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_firmware_management_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsolidateImagesRequest.ProtoReflect.Descriptor instead.
func (*ConsolidateImagesRequest) Descriptor() ([]byte, []int) {
	return file_proto_firmware_management_proto_rawDescGZIP(), []int{5}
}

func (x *ConsolidateImagesRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

// ConsolidateImagesResponse contains the result of the consolidation operation
type ConsolidateImagesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The current image that was set as default
	CurrentImage string `protobuf:"bytes,1,opt,name=current_image,json=currentImage,proto3" json:"current_image,omitempty"`
	// List of images that were removed (or would be removed in dry_run)
	RemovedImages []string `protobuf:"bytes,2,rep,name=removed_images,json=removedImages,proto3" json:"removed_images,omitempty"`
	// Estimated space freed in bytes (if available)
	SpaceFreedBytes int64 `protobuf:"varint,3,opt,name=space_freed_bytes,json=spaceFreedBytes,proto3" json:"space_freed_bytes,omitempty"`
	// Any warnings or non-fatal errors encountered
	Warnings []string `protobuf:"bytes,4,rep,name=warnings,proto3" json:"warnings,omitempty"`
	// Whether the operation was actually performed (false for dry_run)
	Executed      bool `protobuf:"varint,5,opt,name=executed,proto3" json:"executed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsolidateImagesResponse) Reset() {
	*x = ConsolidateImagesResponse{}
	mi := &file_proto_firmware_management_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsolidateImagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsolidateImagesResponse) ProtoMessage() {}

func (x *ConsolidateImagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_firmware_management_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsolidateImagesResponse.ProtoReflect.Descriptor instead.
func (*ConsolidateImagesResponse) Descriptor() ([]byte, []int) {
	return file_proto_firmware_management_proto_rawDescGZIP(), []int{6}
}

func (x *ConsolidateImagesResponse) GetCurrentImage() string {
	if x != nil {
		return x.CurrentImage
	}
	return ""
}

func (x *ConsolidateImagesResponse) GetRemovedImages() []string {
	if x != nil {
		return x.RemovedImages
	}
	return nil
}

func (x *ConsolidateImagesResponse) GetSpaceFreedBytes() int64 {
	if x != nil {
		return x.SpaceFreedBytes
	}
	return 0
}

func (x *ConsolidateImagesResponse) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *ConsolidateImagesResponse) GetExecuted() bool {
	if x != nil {
		return x.Executed
	}
	return false
}

// ListImagesRequest is the request to list installed SONiC images
type ListImagesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListImagesRequest) Reset() {
	*x = ListImagesRequest{}
	mi := &file_proto_firmware_management_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListImagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImagesRequest) ProtoMessage() {}

func (x *ListImagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_firmware_management_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImagesRequest.ProtoReflect.Descriptor instead.
func (*ListImagesRequest) Descriptor() ([]byte, []int) {
	return file_proto_firmware_management_proto_rawDescGZIP(), []int{7}
}

// ListImagesResponse contains the list of installed SONiC images
type ListImagesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of all installed image names
	Images []string `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
	// Name of the currently running image
	CurrentImage string `protobuf:"bytes,2,opt,name=current_image,json=currentImage,proto3" json:"current_image,omitempty"`
	// Name of the next boot image
	NextImage string `protobuf:"bytes,3,opt,name=next_image,json=nextImage,proto3" json:"next_image,omitempty"`
	// Any warnings or non-fatal errors encountered
	Warnings      []string `protobuf:"bytes,4,rep,name=warnings,proto3" json:"warnings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListImagesResponse) Reset() {
	*x = ListImagesResponse{}
	mi := &file_proto_firmware_management_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListImagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImagesResponse) ProtoMessage() {}

func (x *ListImagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_firmware_management_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImagesResponse.ProtoReflect.Descriptor instead.
func (*ListImagesResponse) Descriptor() ([]byte, []int) {
	return file_proto_firmware_management_proto_rawDescGZIP(), []int{8}
}

func (x *ListImagesResponse) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *ListImagesResponse) GetCurrentImage() string {
	if x != nil {
		return x.CurrentImage
	}
	return ""
}

func (x *ListImagesResponse) GetNextImage() string {
	if x != nil {
		return x.NextImage
	}
	return ""
}

func (x *ListImagesResponse) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

// Request to start firmware download
type DownloadFirmwareRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// URL to download from (e.g., "http://10.201.148.43/pipelines/Networking-acs-buildimage-Official/vs/test/sonic-vs.bin")
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Optional output path. If empty, filename is auto-detected from URL and saved to /host
	OutputPath string `protobuf:"bytes,2,opt,name=output_path,json=outputPath,proto3" json:"output_path,omitempty"`
	// Optional connection timeout in seconds (defaults to 30)
	ConnectTimeoutSeconds int32 `protobuf:"varint,3,opt,name=connect_timeout_seconds,json=connectTimeoutSeconds,proto3" json:"connect_timeout_seconds,omitempty"`
	// Optional overall timeout in seconds (defaults to 300)
	TotalTimeoutSeconds int32 `protobuf:"varint,4,opt,name=total_timeout_seconds,json=totalTimeoutSeconds,proto3" json:"total_timeout_seconds,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *DownloadFirmwareRequest) Reset() {
	*x = DownloadFirmwareRequest{}
	mi := &file_proto_firmware_management_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadFirmwareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadFirmwareRequest) ProtoMessage() {}

func (x *DownloadFirmwareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_firmware_management_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadFirmwareRequest.ProtoReflect.Descriptor instead.
func (*DownloadFirmwareRequest) Descriptor() ([]byte, []int) {
	return file_proto_firmware_management_proto_rawDescGZIP(), []int{9}
}

func (x *DownloadFirmwareRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *DownloadFirmwareRequest) GetOutputPath() string {
	if x != nil {
		return x.OutputPath
	}
	return ""
}

func (x *DownloadFirmwareRequest) GetConnectTimeoutSeconds() int32 {
	if x != nil {
		return x.ConnectTimeoutSeconds
	}
	return 0
}

func (x *DownloadFirmwareRequest) GetTotalTimeoutSeconds() int32 {
	if x != nil {
		return x.TotalTimeoutSeconds
	}
	return 0
}

// Response from starting firmware download
type DownloadFirmwareResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique session ID for tracking this download
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Initial status message
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// Resolved output path where file will be saved
	OutputPath    string `protobuf:"bytes,3,opt,name=output_path,json=outputPath,proto3" json:"output_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadFirmwareResponse) Reset() {
	*x = DownloadFirmwareResponse{}
	mi := &file_proto_firmware_management_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadFirmwareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadFirmwareResponse) ProtoMessage() {}

func (x *DownloadFirmwareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_firmware_management_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadFirmwareResponse.ProtoReflect.Descriptor instead.
func (*DownloadFirmwareResponse) Descriptor() ([]byte, []int) {
	return file_proto_firmware_management_proto_rawDescGZIP(), []int{10}
}

func (x *DownloadFirmwareResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *DownloadFirmwareResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DownloadFirmwareResponse) GetOutputPath() string {
	if x != nil {
		return x.OutputPath
	}
	return ""
}

// Request to get download status
type GetDownloadStatusRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Session ID returned from DownloadFirmware
	SessionId     string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDownloadStatusRequest) Reset() {
	*x = GetDownloadStatusRequest{}
	mi := &file_proto_firmware_management_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDownloadStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDownloadStatusRequest) ProtoMessage() {}

func (x *GetDownloadStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_firmware_management_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDownloadStatusRequest.ProtoReflect.Descriptor instead.
func (*GetDownloadStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_firmware_management_proto_rawDescGZIP(), []int{11}
}

func (x *GetDownloadStatusRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// Response with current download status
type GetDownloadStatusResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Session ID
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Current download state - exactly one of these will be set
	//
	// Types that are valid to be assigned to State:
	//
	//	*GetDownloadStatusResponse_Starting
	//	*GetDownloadStatusResponse_Progress
	//	*GetDownloadStatusResponse_Result
	//	*GetDownloadStatusResponse_Error
	State         isGetDownloadStatusResponse_State `protobuf_oneof:"state"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDownloadStatusResponse) Reset() {
	*x = GetDownloadStatusResponse{}
	mi := &file_proto_firmware_management_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDownloadStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDownloadStatusResponse) ProtoMessage() {}

func (x *GetDownloadStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_firmware_management_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDownloadStatusResponse.ProtoReflect.Descriptor instead.
func (*GetDownloadStatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_firmware_management_proto_rawDescGZIP(), []int{12}
}

func (x *GetDownloadStatusResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *GetDownloadStatusResponse) GetState() isGetDownloadStatusResponse_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *GetDownloadStatusResponse) GetStarting() *DownloadStarting {
	if x != nil {
		if x, ok := x.State.(*GetDownloadStatusResponse_Starting); ok {
			return x.Starting
		}
	}
	return nil
}

func (x *GetDownloadStatusResponse) GetProgress() *DownloadProgress {
	if x != nil {
		if x, ok := x.State.(*GetDownloadStatusResponse_Progress); ok {
			return x.Progress
		}
	}
	return nil
}

func (x *GetDownloadStatusResponse) GetResult() *DownloadResult {
	if x != nil {
		if x, ok := x.State.(*GetDownloadStatusResponse_Result); ok {
			return x.Result
		}
	}
	return nil
}

func (x *GetDownloadStatusResponse) GetError() *DownloadError {
	if x != nil {
		if x, ok := x.State.(*GetDownloadStatusResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isGetDownloadStatusResponse_State interface {
	isGetDownloadStatusResponse_State()
}

type GetDownloadStatusResponse_Starting struct {
	// Download is starting up
	Starting *DownloadStarting `protobuf:"bytes,2,opt,name=starting,proto3,oneof"`
}

type GetDownloadStatusResponse_Progress struct {
	// Download is in progress
	Progress *DownloadProgress `protobuf:"bytes,3,opt,name=progress,proto3,oneof"`
}

type GetDownloadStatusResponse_Result struct {
	// Download completed successfully
	Result *DownloadResult `protobuf:"bytes,4,opt,name=result,proto3,oneof"`
}

type GetDownloadStatusResponse_Error struct {
	// Download failed with error
	Error *DownloadError `protobuf:"bytes,5,opt,name=error,proto3,oneof"`
}

func (*GetDownloadStatusResponse_Starting) isGetDownloadStatusResponse_State() {}

func (*GetDownloadStatusResponse_Progress) isGetDownloadStatusResponse_State() {}

func (*GetDownloadStatusResponse_Result) isGetDownloadStatusResponse_State() {}

func (*GetDownloadStatusResponse_Error) isGetDownloadStatusResponse_State() {}

// Download is starting up
type DownloadStarting struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Status message
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Time when download started (RFC3339 format)
	StartTime     string `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadStarting) Reset() {
	*x = DownloadStarting{}
	mi := &file_proto_firmware_management_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadStarting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadStarting) ProtoMessage() {}

func (x *DownloadStarting) ProtoReflect() protoreflect.Message {
	mi := &file_proto_firmware_management_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadStarting.ProtoReflect.Descriptor instead.
func (*DownloadStarting) Descriptor() ([]byte, []int) {
	return file_proto_firmware_management_proto_rawDescGZIP(), []int{13}
}

func (x *DownloadStarting) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DownloadStarting) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

// Download progress information
type DownloadProgress struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Bytes downloaded so far
	DownloadedBytes int64 `protobuf:"varint,1,opt,name=downloaded_bytes,json=downloadedBytes,proto3" json:"downloaded_bytes,omitempty"`
	// Total bytes to download (0 if unknown)
	TotalBytes int64 `protobuf:"varint,2,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	// Download speed in bytes per second
	SpeedBytesPerSec float64 `protobuf:"fixed64,3,opt,name=speed_bytes_per_sec,json=speedBytesPerSec,proto3" json:"speed_bytes_per_sec,omitempty"`
	// Progress percentage (0-100, calculated from downloaded/total if total > 0)
	Percentage float64 `protobuf:"fixed64,4,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// Current download method being used ("interface", "ip", "direct")
	CurrentMethod string `protobuf:"bytes,5,opt,name=current_method,json=currentMethod,proto3" json:"current_method,omitempty"`
	// Number of attempts made so far
	AttemptCount int32 `protobuf:"varint,6,opt,name=attempt_count,json=attemptCount,proto3" json:"attempt_count,omitempty"`
	// Time when download started (RFC3339 format)
	StartTime string `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Time of last progress update (RFC3339 format)
	LastUpdate    string `protobuf:"bytes,8,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadProgress) Reset() {
	*x = DownloadProgress{}
	mi := &file_proto_firmware_management_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadProgress) ProtoMessage() {}

func (x *DownloadProgress) ProtoReflect() protoreflect.Message {
	mi := &file_proto_firmware_management_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadProgress.ProtoReflect.Descriptor instead.
func (*DownloadProgress) Descriptor() ([]byte, []int) {
	return file_proto_firmware_management_proto_rawDescGZIP(), []int{14}
}

func (x *DownloadProgress) GetDownloadedBytes() int64 {
	if x != nil {
		return x.DownloadedBytes
	}
	return 0
}

func (x *DownloadProgress) GetTotalBytes() int64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *DownloadProgress) GetSpeedBytesPerSec() float64 {
	if x != nil {
		return x.SpeedBytesPerSec
	}
	return 0
}

func (x *DownloadProgress) GetPercentage() float64 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *DownloadProgress) GetCurrentMethod() string {
	if x != nil {
		return x.CurrentMethod
	}
	return ""
}

func (x *DownloadProgress) GetAttemptCount() int32 {
	if x != nil {
		return x.AttemptCount
	}
	return 0
}

func (x *DownloadProgress) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *DownloadProgress) GetLastUpdate() string {
	if x != nil {
		return x.LastUpdate
	}
	return ""
}

// Download error information
type DownloadError struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Error category: "network", "http", "filesystem", "other"
	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	// HTTP status code if applicable
	HttpCode int32 `protobuf:"varint,2,opt,name=http_code,json=httpCode,proto3" json:"http_code,omitempty"`
	// Human-readable error message
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// URL that failed to download
	Url string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	// Details of all attempts made
	Attempts      []*DownloadAttempt `protobuf:"bytes,5,rep,name=attempts,proto3" json:"attempts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadError) Reset() {
	*x = DownloadError{}
	mi := &file_proto_firmware_management_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadError) ProtoMessage() {}

func (x *DownloadError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_firmware_management_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadError.ProtoReflect.Descriptor instead.
func (*DownloadError) Descriptor() ([]byte, []int) {
	return file_proto_firmware_management_proto_rawDescGZIP(), []int{15}
}

func (x *DownloadError) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *DownloadError) GetHttpCode() int32 {
	if x != nil {
		return x.HttpCode
	}
	return 0
}

func (x *DownloadError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DownloadError) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *DownloadError) GetAttempts() []*DownloadAttempt {
	if x != nil {
		return x.Attempts
	}
	return nil
}

// Individual download attempt information
type DownloadAttempt struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Method used: "interface", "ip", "direct"
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// Network interface or IP address used (for informational purposes)
	Interface string `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
	// Error message for this attempt (empty if successful)
	Error string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	// Duration of this attempt in milliseconds
	DurationMs int64 `protobuf:"varint,4,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	// HTTP status code received (0 if no response)
	HttpStatus    int32 `protobuf:"varint,5,opt,name=http_status,json=httpStatus,proto3" json:"http_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadAttempt) Reset() {
	*x = DownloadAttempt{}
	mi := &file_proto_firmware_management_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadAttempt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadAttempt) ProtoMessage() {}

func (x *DownloadAttempt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_firmware_management_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadAttempt.ProtoReflect.Descriptor instead.
func (*DownloadAttempt) Descriptor() ([]byte, []int) {
	return file_proto_firmware_management_proto_rawDescGZIP(), []int{16}
}

func (x *DownloadAttempt) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *DownloadAttempt) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *DownloadAttempt) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *DownloadAttempt) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *DownloadAttempt) GetHttpStatus() int32 {
	if x != nil {
		return x.HttpStatus
	}
	return 0
}

// Final download result for completed downloads
type DownloadResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path where file was saved
	FilePath string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	// Size of downloaded file in bytes
	FileSizeBytes int64 `protobuf:"varint,2,opt,name=file_size_bytes,json=fileSizeBytes,proto3" json:"file_size_bytes,omitempty"`
	// Total download duration in milliseconds
	DurationMs int64 `protobuf:"varint,3,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	// Number of attempts made
	AttemptCount int32 `protobuf:"varint,4,opt,name=attempt_count,json=attemptCount,proto3" json:"attempt_count,omitempty"`
	// Final successful method used
	FinalMethod string `protobuf:"bytes,5,opt,name=final_method,json=finalMethod,proto3" json:"final_method,omitempty"`
	// URL that was downloaded
	Url           string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadResult) Reset() {
	*x = DownloadResult{}
	mi := &file_proto_firmware_management_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadResult) ProtoMessage() {}

func (x *DownloadResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_firmware_management_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadResult.ProtoReflect.Descriptor instead.
func (*DownloadResult) Descriptor() ([]byte, []int) {
	return file_proto_firmware_management_proto_rawDescGZIP(), []int{17}
}

func (x *DownloadResult) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *DownloadResult) GetFileSizeBytes() int64 {
	if x != nil {
		return x.FileSizeBytes
	}
	return 0
}

func (x *DownloadResult) GetDurationMs() int64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *DownloadResult) GetAttemptCount() int32 {
	if x != nil {
		return x.AttemptCount
	}
	return 0
}

func (x *DownloadResult) GetFinalMethod() string {
	if x != nil {
		return x.FinalMethod
	}
	return ""
}

func (x *DownloadResult) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

var File_proto_firmware_management_proto protoreflect.FileDescriptor

const file_proto_firmware_management_proto_rawDesc = "" +
	"\n" +
	"\x1fproto/firmware_management.proto\x12\x05sonic\"\x1b\n" +
	"\x19CleanupOldFirmwareRequest\"\xaa\x01\n" +
	"\x1aCleanupOldFirmwareResponse\x12#\n" +
	"\rfiles_deleted\x18\x01 \x01(\x05R\ffilesDeleted\x12#\n" +
	"\rdeleted_files\x18\x02 \x03(\tR\fdeletedFiles\x12\x16\n" +
	"\x06errors\x18\x03 \x03(\tR\x06errors\x12*\n" +
	"\x11space_freed_bytes\x18\x04 \x01(\x03R\x0fspaceFreedBytes\"s\n" +
	"\x19ListFirmwareImagesRequest\x12-\n" +
	"\x12search_directories\x18\x01 \x03(\tR\x11searchDirectories\x12'\n" +
	"\x0fversion_pattern\x18\x02 \x01(\tR\x0eversionPattern\"\xb4\x01\n" +
	"\x11FirmwareImageInfo\x12\x1b\n" +
	"\tfile_path\x18\x01 \x01(\tR\bfilePath\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12!\n" +
	"\ffull_version\x18\x03 \x01(\tR\vfullVersion\x12\x1d\n" +
	"\n" +
	"image_type\x18\x04 \x01(\tR\timageType\x12&\n" +
	"\x0ffile_size_bytes\x18\x05 \x01(\x03R\rfileSizeBytes\"f\n" +
	"\x1aListFirmwareImagesResponse\x120\n" +
	"\x06images\x18\x01 \x03(\v2\x18.sonic.FirmwareImageInfoR\x06images\x12\x16\n" +
	"\x06errors\x18\x02 \x03(\tR\x06errors\"3\n" +
	"\x18ConsolidateImagesRequest\x12\x17\n" +
	"\adry_run\x18\x01 \x01(\bR\x06dryRun\"\xcb\x01\n" +
	"\x19ConsolidateImagesResponse\x12#\n" +
	"\rcurrent_image\x18\x01 \x01(\tR\fcurrentImage\x12%\n" +
	"\x0eremoved_images\x18\x02 \x03(\tR\rremovedImages\x12*\n" +
	"\x11space_freed_bytes\x18\x03 \x01(\x03R\x0fspaceFreedBytes\x12\x1a\n" +
	"\bwarnings\x18\x04 \x03(\tR\bwarnings\x12\x1a\n" +
	"\bexecuted\x18\x05 \x01(\bR\bexecuted\"\x13\n" +
	"\x11ListImagesRequest\"\x8c\x01\n" +
	"\x12ListImagesResponse\x12\x16\n" +
	"\x06images\x18\x01 \x03(\tR\x06images\x12#\n" +
	"\rcurrent_image\x18\x02 \x01(\tR\fcurrentImage\x12\x1d\n" +
	"\n" +
	"next_image\x18\x03 \x01(\tR\tnextImage\x12\x1a\n" +
	"\bwarnings\x18\x04 \x03(\tR\bwarnings\"\xb8\x01\n" +
	"\x17DownloadFirmwareRequest\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12\x1f\n" +
	"\voutput_path\x18\x02 \x01(\tR\n" +
	"outputPath\x126\n" +
	"\x17connect_timeout_seconds\x18\x03 \x01(\x05R\x15connectTimeoutSeconds\x122\n" +
	"\x15total_timeout_seconds\x18\x04 \x01(\x05R\x13totalTimeoutSeconds\"r\n" +
	"\x18DownloadFirmwareResponse\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x1f\n" +
	"\voutput_path\x18\x03 \x01(\tR\n" +
	"outputPath\"9\n" +
	"\x18GetDownloadStatusRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\"\x90\x02\n" +
	"\x19GetDownloadStatusResponse\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x125\n" +
	"\bstarting\x18\x02 \x01(\v2\x17.sonic.DownloadStartingH\x00R\bstarting\x125\n" +
	"\bprogress\x18\x03 \x01(\v2\x17.sonic.DownloadProgressH\x00R\bprogress\x12/\n" +
	"\x06result\x18\x04 \x01(\v2\x15.sonic.DownloadResultH\x00R\x06result\x12,\n" +
	"\x05error\x18\x05 \x01(\v2\x14.sonic.DownloadErrorH\x00R\x05errorB\a\n" +
	"\x05state\"K\n" +
	"\x10DownloadStarting\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"start_time\x18\x02 \x01(\tR\tstartTime\"\xb9\x02\n" +
	"\x10DownloadProgress\x12)\n" +
	"\x10downloaded_bytes\x18\x01 \x01(\x03R\x0fdownloadedBytes\x12\x1f\n" +
	"\vtotal_bytes\x18\x02 \x01(\x03R\n" +
	"totalBytes\x12-\n" +
	"\x13speed_bytes_per_sec\x18\x03 \x01(\x01R\x10speedBytesPerSec\x12\x1e\n" +
	"\n" +
	"percentage\x18\x04 \x01(\x01R\n" +
	"percentage\x12%\n" +
	"\x0ecurrent_method\x18\x05 \x01(\tR\rcurrentMethod\x12#\n" +
	"\rattempt_count\x18\x06 \x01(\x05R\fattemptCount\x12\x1d\n" +
	"\n" +
	"start_time\x18\a \x01(\tR\tstartTime\x12\x1f\n" +
	"\vlast_update\x18\b \x01(\tR\n" +
	"lastUpdate\"\xa8\x01\n" +
	"\rDownloadError\x12\x1a\n" +
	"\bcategory\x18\x01 \x01(\tR\bcategory\x12\x1b\n" +
	"\thttp_code\x18\x02 \x01(\x05R\bhttpCode\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12\x10\n" +
	"\x03url\x18\x04 \x01(\tR\x03url\x122\n" +
	"\battempts\x18\x05 \x03(\v2\x16.sonic.DownloadAttemptR\battempts\"\x9f\x01\n" +
	"\x0fDownloadAttempt\x12\x16\n" +
	"\x06method\x18\x01 \x01(\tR\x06method\x12\x1c\n" +
	"\tinterface\x18\x02 \x01(\tR\tinterface\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\x12\x1f\n" +
	"\vduration_ms\x18\x04 \x01(\x03R\n" +
	"durationMs\x12\x1f\n" +
	"\vhttp_status\x18\x05 \x01(\x05R\n" +
	"httpStatus\"\xd0\x01\n" +
	"\x0eDownloadResult\x12\x1b\n" +
	"\tfile_path\x18\x01 \x01(\tR\bfilePath\x12&\n" +
	"\x0ffile_size_bytes\x18\x02 \x01(\x03R\rfileSizeBytes\x12\x1f\n" +
	"\vduration_ms\x18\x03 \x01(\x03R\n" +
	"durationMs\x12#\n" +
	"\rattempt_count\x18\x04 \x01(\x05R\fattemptCount\x12!\n" +
	"\ffinal_method\x18\x05 \x01(\tR\vfinalMethod\x12\x10\n" +
	"\x03url\x18\x06 \x01(\tR\x03url2\x9e\x04\n" +
	"\x12FirmwareManagement\x12[\n" +
	"\x12CleanupOldFirmware\x12 .sonic.CleanupOldFirmwareRequest\x1a!.sonic.CleanupOldFirmwareResponse\"\x00\x12[\n" +
	"\x12ListFirmwareImages\x12 .sonic.ListFirmwareImagesRequest\x1a!.sonic.ListFirmwareImagesResponse\"\x00\x12X\n" +
	"\x11ConsolidateImages\x12\x1f.sonic.ConsolidateImagesRequest\x1a .sonic.ConsolidateImagesResponse\"\x00\x12C\n" +
	"\n" +
	"ListImages\x12\x18.sonic.ListImagesRequest\x1a\x19.sonic.ListImagesResponse\"\x00\x12U\n" +
	"\x10DownloadFirmware\x12\x1e.sonic.DownloadFirmwareRequest\x1a\x1f.sonic.DownloadFirmwareResponse\"\x00\x12X\n" +
	"\x11GetDownloadStatus\x12\x1f.sonic.GetDownloadStatusRequest\x1a .sonic.GetDownloadStatusResponse\"\x00B7Z5github.com/sonic-net/sonic-gnmi/upgrade-service/protob\x06proto3"

var (
	file_proto_firmware_management_proto_rawDescOnce sync.Once
	file_proto_firmware_management_proto_rawDescData []byte
)

func file_proto_firmware_management_proto_rawDescGZIP() []byte {
	file_proto_firmware_management_proto_rawDescOnce.Do(func() {
		file_proto_firmware_management_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_firmware_management_proto_rawDesc), len(file_proto_firmware_management_proto_rawDesc)))
	})
	return file_proto_firmware_management_proto_rawDescData
}

var file_proto_firmware_management_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_proto_firmware_management_proto_goTypes = []any{
	(*CleanupOldFirmwareRequest)(nil),  // 0: sonic.CleanupOldFirmwareRequest
	(*CleanupOldFirmwareResponse)(nil), // 1: sonic.CleanupOldFirmwareResponse
	(*ListFirmwareImagesRequest)(nil),  // 2: sonic.ListFirmwareImagesRequest
	(*FirmwareImageInfo)(nil),          // 3: sonic.FirmwareImageInfo
	(*ListFirmwareImagesResponse)(nil), // 4: sonic.ListFirmwareImagesResponse
	(*ConsolidateImagesRequest)(nil),   // 5: sonic.ConsolidateImagesRequest
	(*ConsolidateImagesResponse)(nil),  // 6: sonic.ConsolidateImagesResponse
	(*ListImagesRequest)(nil),          // 7: sonic.ListImagesRequest
	(*ListImagesResponse)(nil),         // 8: sonic.ListImagesResponse
	(*DownloadFirmwareRequest)(nil),    // 9: sonic.DownloadFirmwareRequest
	(*DownloadFirmwareResponse)(nil),   // 10: sonic.DownloadFirmwareResponse
	(*GetDownloadStatusRequest)(nil),   // 11: sonic.GetDownloadStatusRequest
	(*GetDownloadStatusResponse)(nil),  // 12: sonic.GetDownloadStatusResponse
	(*DownloadStarting)(nil),           // 13: sonic.DownloadStarting
	(*DownloadProgress)(nil),           // 14: sonic.DownloadProgress
	(*DownloadError)(nil),              // 15: sonic.DownloadError
	(*DownloadAttempt)(nil),            // 16: sonic.DownloadAttempt
	(*DownloadResult)(nil),             // 17: sonic.DownloadResult
}
var file_proto_firmware_management_proto_depIdxs = []int32{
	3,  // 0: sonic.ListFirmwareImagesResponse.images:type_name -> sonic.FirmwareImageInfo
	13, // 1: sonic.GetDownloadStatusResponse.starting:type_name -> sonic.DownloadStarting
	14, // 2: sonic.GetDownloadStatusResponse.progress:type_name -> sonic.DownloadProgress
	17, // 3: sonic.GetDownloadStatusResponse.result:type_name -> sonic.DownloadResult
	15, // 4: sonic.GetDownloadStatusResponse.error:type_name -> sonic.DownloadError
	16, // 5: sonic.DownloadError.attempts:type_name -> sonic.DownloadAttempt
	0,  // 6: sonic.FirmwareManagement.CleanupOldFirmware:input_type -> sonic.CleanupOldFirmwareRequest
	2,  // 7: sonic.FirmwareManagement.ListFirmwareImages:input_type -> sonic.ListFirmwareImagesRequest
	5,  // 8: sonic.FirmwareManagement.ConsolidateImages:input_type -> sonic.ConsolidateImagesRequest
	7,  // 9: sonic.FirmwareManagement.ListImages:input_type -> sonic.ListImagesRequest
	9,  // 10: sonic.FirmwareManagement.DownloadFirmware:input_type -> sonic.DownloadFirmwareRequest
	11, // 11: sonic.FirmwareManagement.GetDownloadStatus:input_type -> sonic.GetDownloadStatusRequest
	1,  // 12: sonic.FirmwareManagement.CleanupOldFirmware:output_type -> sonic.CleanupOldFirmwareResponse
	4,  // 13: sonic.FirmwareManagement.ListFirmwareImages:output_type -> sonic.ListFirmwareImagesResponse
	6,  // 14: sonic.FirmwareManagement.ConsolidateImages:output_type -> sonic.ConsolidateImagesResponse
	8,  // 15: sonic.FirmwareManagement.ListImages:output_type -> sonic.ListImagesResponse
	10, // 16: sonic.FirmwareManagement.DownloadFirmware:output_type -> sonic.DownloadFirmwareResponse
	12, // 17: sonic.FirmwareManagement.GetDownloadStatus:output_type -> sonic.GetDownloadStatusResponse
	12, // [12:18] is the sub-list for method output_type
	6,  // [6:12] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_proto_firmware_management_proto_init() }
func file_proto_firmware_management_proto_init() {
	if File_proto_firmware_management_proto != nil {
		return
	}
	file_proto_firmware_management_proto_msgTypes[12].OneofWrappers = []any{
		(*GetDownloadStatusResponse_Starting)(nil),
		(*GetDownloadStatusResponse_Progress)(nil),
		(*GetDownloadStatusResponse_Result)(nil),
		(*GetDownloadStatusResponse_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_firmware_management_proto_rawDesc), len(file_proto_firmware_management_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_firmware_management_proto_goTypes,
		DependencyIndexes: file_proto_firmware_management_proto_depIdxs,
		MessageInfos:      file_proto_firmware_management_proto_msgTypes,
	}.Build()
	File_proto_firmware_management_proto = out.File
	file_proto_firmware_management_proto_goTypes = nil
	file_proto_firmware_management_proto_depIdxs = nil
}
