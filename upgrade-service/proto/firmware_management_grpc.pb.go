// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/firmware_management.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FirmwareManagement_CleanupOldFirmware_FullMethodName = "/sonic.FirmwareManagement/CleanupOldFirmware"
	FirmwareManagement_ListFirmwareImages_FullMethodName = "/sonic.FirmwareManagement/ListFirmwareImages"
)

// FirmwareManagementClient is the client API for FirmwareManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// FirmwareManagement service provides firmware management operations
type FirmwareManagementClient interface {
	// CleanupOldFirmware removes old firmware files from the system
	CleanupOldFirmware(ctx context.Context, in *CleanupOldFirmwareRequest, opts ...grpc.CallOption) (*CleanupOldFirmwareResponse, error)
	// ListFirmwareImages discovers firmware images in configured directories
	ListFirmwareImages(ctx context.Context, in *ListFirmwareImagesRequest, opts ...grpc.CallOption) (*ListFirmwareImagesResponse, error)
}

type firmwareManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewFirmwareManagementClient(cc grpc.ClientConnInterface) FirmwareManagementClient {
	return &firmwareManagementClient{cc}
}

func (c *firmwareManagementClient) CleanupOldFirmware(ctx context.Context, in *CleanupOldFirmwareRequest, opts ...grpc.CallOption) (*CleanupOldFirmwareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CleanupOldFirmwareResponse)
	err := c.cc.Invoke(ctx, FirmwareManagement_CleanupOldFirmware_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmwareManagementClient) ListFirmwareImages(ctx context.Context, in *ListFirmwareImagesRequest, opts ...grpc.CallOption) (*ListFirmwareImagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFirmwareImagesResponse)
	err := c.cc.Invoke(ctx, FirmwareManagement_ListFirmwareImages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FirmwareManagementServer is the server API for FirmwareManagement service.
// All implementations must embed UnimplementedFirmwareManagementServer
// for forward compatibility.
//
// FirmwareManagement service provides firmware management operations
type FirmwareManagementServer interface {
	// CleanupOldFirmware removes old firmware files from the system
	CleanupOldFirmware(context.Context, *CleanupOldFirmwareRequest) (*CleanupOldFirmwareResponse, error)
	// ListFirmwareImages discovers firmware images in configured directories
	ListFirmwareImages(context.Context, *ListFirmwareImagesRequest) (*ListFirmwareImagesResponse, error)
	mustEmbedUnimplementedFirmwareManagementServer()
}

// UnimplementedFirmwareManagementServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFirmwareManagementServer struct{}

func (UnimplementedFirmwareManagementServer) CleanupOldFirmware(context.Context, *CleanupOldFirmwareRequest) (*CleanupOldFirmwareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanupOldFirmware not implemented")
}
func (UnimplementedFirmwareManagementServer) ListFirmwareImages(context.Context, *ListFirmwareImagesRequest) (*ListFirmwareImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFirmwareImages not implemented")
}
func (UnimplementedFirmwareManagementServer) mustEmbedUnimplementedFirmwareManagementServer() {}
func (UnimplementedFirmwareManagementServer) testEmbeddedByValue()                            {}

// UnsafeFirmwareManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FirmwareManagementServer will
// result in compilation errors.
type UnsafeFirmwareManagementServer interface {
	mustEmbedUnimplementedFirmwareManagementServer()
}

func RegisterFirmwareManagementServer(s grpc.ServiceRegistrar, srv FirmwareManagementServer) {
	// If the following call pancis, it indicates UnimplementedFirmwareManagementServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FirmwareManagement_ServiceDesc, srv)
}

func _FirmwareManagement_CleanupOldFirmware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanupOldFirmwareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmwareManagementServer).CleanupOldFirmware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FirmwareManagement_CleanupOldFirmware_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmwareManagementServer).CleanupOldFirmware(ctx, req.(*CleanupOldFirmwareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmwareManagement_ListFirmwareImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFirmwareImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmwareManagementServer).ListFirmwareImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FirmwareManagement_ListFirmwareImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmwareManagementServer).ListFirmwareImages(ctx, req.(*ListFirmwareImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FirmwareManagement_ServiceDesc is the grpc.ServiceDesc for FirmwareManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FirmwareManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sonic.FirmwareManagement",
	HandlerType: (*FirmwareManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CleanupOldFirmware",
			Handler:    _FirmwareManagement_CleanupOldFirmware_Handler,
		},
		{
			MethodName: "ListFirmwareImages",
			Handler:    _FirmwareManagement_ListFirmwareImages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/firmware_management.proto",
}
