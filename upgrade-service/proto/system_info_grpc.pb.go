// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/system_info.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SystemInfo_GetPlatformType_FullMethodName      = "/sonic.SystemInfo/GetPlatformType"
	SystemInfo_GetDiskSpace_FullMethodName         = "/sonic.SystemInfo/GetDiskSpace"
	SystemInfo_GetShowCommandOutput_FullMethodName = "/sonic.SystemInfo/GetShowCommandOutput"
)

// SystemInfoClient is the client API for SystemInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SystemInfo service provides information about the system
type SystemInfoClient interface {
	// GetPlatformType returns the platform type of the system
	GetPlatformType(ctx context.Context, in *GetPlatformTypeRequest, opts ...grpc.CallOption) (*GetPlatformTypeResponse, error)
	// GetDiskSpace returns disk space information for key filesystems
	GetDiskSpace(ctx context.Context, in *GetDiskSpaceRequest, opts ...grpc.CallOption) (*GetDiskSpaceResponse, error)
	// GetShowCommandOutput executes various show commands and returns structured output
	GetShowCommandOutput(ctx context.Context, in *GetShowCommandRequest, opts ...grpc.CallOption) (*GetShowCommandResponse, error)
}

type systemInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemInfoClient(cc grpc.ClientConnInterface) SystemInfoClient {
	return &systemInfoClient{cc}
}

func (c *systemInfoClient) GetPlatformType(ctx context.Context, in *GetPlatformTypeRequest, opts ...grpc.CallOption) (*GetPlatformTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlatformTypeResponse)
	err := c.cc.Invoke(ctx, SystemInfo_GetPlatformType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemInfoClient) GetDiskSpace(ctx context.Context, in *GetDiskSpaceRequest, opts ...grpc.CallOption) (*GetDiskSpaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDiskSpaceResponse)
	err := c.cc.Invoke(ctx, SystemInfo_GetDiskSpace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemInfoClient) GetShowCommandOutput(ctx context.Context, in *GetShowCommandRequest, opts ...grpc.CallOption) (*GetShowCommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShowCommandResponse)
	err := c.cc.Invoke(ctx, SystemInfo_GetShowCommandOutput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemInfoServer is the server API for SystemInfo service.
// All implementations must embed UnimplementedSystemInfoServer
// for forward compatibility.
//
// SystemInfo service provides information about the system
type SystemInfoServer interface {
	// GetPlatformType returns the platform type of the system
	GetPlatformType(context.Context, *GetPlatformTypeRequest) (*GetPlatformTypeResponse, error)
	// GetDiskSpace returns disk space information for key filesystems
	GetDiskSpace(context.Context, *GetDiskSpaceRequest) (*GetDiskSpaceResponse, error)
	// GetShowCommandOutput executes various show commands and returns structured output
	GetShowCommandOutput(context.Context, *GetShowCommandRequest) (*GetShowCommandResponse, error)
	mustEmbedUnimplementedSystemInfoServer()
}

// UnimplementedSystemInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSystemInfoServer struct{}

func (UnimplementedSystemInfoServer) GetPlatformType(context.Context, *GetPlatformTypeRequest) (*GetPlatformTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatformType not implemented")
}
func (UnimplementedSystemInfoServer) GetDiskSpace(context.Context, *GetDiskSpaceRequest) (*GetDiskSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiskSpace not implemented")
}
func (UnimplementedSystemInfoServer) GetShowCommandOutput(context.Context, *GetShowCommandRequest) (*GetShowCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShowCommandOutput not implemented")
}
func (UnimplementedSystemInfoServer) mustEmbedUnimplementedSystemInfoServer() {}
func (UnimplementedSystemInfoServer) testEmbeddedByValue()                    {}

// UnsafeSystemInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemInfoServer will
// result in compilation errors.
type UnsafeSystemInfoServer interface {
	mustEmbedUnimplementedSystemInfoServer()
}

func RegisterSystemInfoServer(s grpc.ServiceRegistrar, srv SystemInfoServer) {
	// If the following call pancis, it indicates UnimplementedSystemInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SystemInfo_ServiceDesc, srv)
}

func _SystemInfo_GetPlatformType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlatformTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemInfoServer).GetPlatformType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemInfo_GetPlatformType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemInfoServer).GetPlatformType(ctx, req.(*GetPlatformTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemInfo_GetDiskSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiskSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemInfoServer).GetDiskSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemInfo_GetDiskSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemInfoServer).GetDiskSpace(ctx, req.(*GetDiskSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemInfo_GetShowCommandOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShowCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemInfoServer).GetShowCommandOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemInfo_GetShowCommandOutput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemInfoServer).GetShowCommandOutput(ctx, req.(*GetShowCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemInfo_ServiceDesc is the grpc.ServiceDesc for SystemInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sonic.SystemInfo",
	HandlerType: (*SystemInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlatformType",
			Handler:    _SystemInfo_GetPlatformType_Handler,
		},
		{
			MethodName: "GetDiskSpace",
			Handler:    _SystemInfo_GetDiskSpace_Handler,
		},
		{
			MethodName: "GetShowCommandOutput",
			Handler:    _SystemInfo_GetShowCommandOutput_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/system_info.proto",
}
