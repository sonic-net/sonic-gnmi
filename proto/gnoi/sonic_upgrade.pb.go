// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sonic_upgrade.proto

package gnoi_sonic

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// State of the update process.
type UpdateFirmwareStatus_State int32

const (
	UpdateFirmwareStatus_STARTED   UpdateFirmwareStatus_State = 0
	UpdateFirmwareStatus_RUNNING   UpdateFirmwareStatus_State = 1
	UpdateFirmwareStatus_SUCCEEDED UpdateFirmwareStatus_State = 2
	UpdateFirmwareStatus_FAILED    UpdateFirmwareStatus_State = 3
)

var UpdateFirmwareStatus_State_name = map[int32]string{
	0: "STARTED",
	1: "RUNNING",
	2: "SUCCEEDED",
	3: "FAILED",
}

var UpdateFirmwareStatus_State_value = map[string]int32{
	"STARTED":   0,
	"RUNNING":   1,
	"SUCCEEDED": 2,
	"FAILED":    3,
}

func (x UpdateFirmwareStatus_State) String() string {
	return proto.EnumName(UpdateFirmwareStatus_State_name, int32(x))
}

func (UpdateFirmwareStatus_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ff27221f17e4196b, []int{2, 0}
}

// Request message to start a firmware update.
type UpdateFirmwareRequest struct {
	// Types that are valid to be assigned to Request:
	//
	//	*UpdateFirmwareRequest_FirmwareUpdate
	Request              isUpdateFirmwareRequest_Request `protobuf_oneof:"request"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *UpdateFirmwareRequest) Reset()         { *m = UpdateFirmwareRequest{} }
func (m *UpdateFirmwareRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateFirmwareRequest) ProtoMessage()    {}
func (*UpdateFirmwareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff27221f17e4196b, []int{0}
}
func (m *UpdateFirmwareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateFirmwareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateFirmwareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateFirmwareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateFirmwareRequest.Merge(m, src)
}
func (m *UpdateFirmwareRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateFirmwareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateFirmwareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateFirmwareRequest proto.InternalMessageInfo

type isUpdateFirmwareRequest_Request interface {
	isUpdateFirmwareRequest_Request()
	MarshalTo([]byte) (int, error)
	Size() int
}

type UpdateFirmwareRequest_FirmwareUpdate struct {
	FirmwareUpdate *FirmwareUpdateParams `protobuf:"bytes,1,opt,name=firmware_update,json=firmwareUpdate,proto3,oneof" json:"firmware_update,omitempty"`
}

func (*UpdateFirmwareRequest_FirmwareUpdate) isUpdateFirmwareRequest_Request() {}

func (m *UpdateFirmwareRequest) GetRequest() isUpdateFirmwareRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *UpdateFirmwareRequest) GetFirmwareUpdate() *FirmwareUpdateParams {
	if x, ok := m.GetRequest().(*UpdateFirmwareRequest_FirmwareUpdate); ok {
		return x.FirmwareUpdate
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UpdateFirmwareRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UpdateFirmwareRequest_FirmwareUpdate)(nil),
	}
}

// Parameters for firmware update (current implementation)
type FirmwareUpdateParams struct {
	// Path (inside the server container) or URL to the firmware .bin
	FirmwareSource string `protobuf:"bytes,1,opt,name=firmware_source,json=firmwareSource,proto3" json:"firmware_source,omitempty"`
	// If true, pass UPDATE_MLNX_CPLD_FW="1" to the script (cold-boot vs. warm-reboot).
	UpdateMlnxCpldFw     bool     `protobuf:"varint,2,opt,name=update_mlnx_cpld_fw,json=updateMlnxCpldFw,proto3" json:"update_mlnx_cpld_fw,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FirmwareUpdateParams) Reset()         { *m = FirmwareUpdateParams{} }
func (m *FirmwareUpdateParams) String() string { return proto.CompactTextString(m) }
func (*FirmwareUpdateParams) ProtoMessage()    {}
func (*FirmwareUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff27221f17e4196b, []int{1}
}
func (m *FirmwareUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FirmwareUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FirmwareUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FirmwareUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirmwareUpdateParams.Merge(m, src)
}
func (m *FirmwareUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *FirmwareUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_FirmwareUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_FirmwareUpdateParams proto.InternalMessageInfo

func (m *FirmwareUpdateParams) GetFirmwareSource() string {
	if m != nil {
		return m.FirmwareSource
	}
	return ""
}

func (m *FirmwareUpdateParams) GetUpdateMlnxCpldFw() bool {
	if m != nil {
		return m.UpdateMlnxCpldFw
	}
	return false
}

// Status message for firmware update progress.
type UpdateFirmwareStatus struct {
	// A human-readable line of output from the script.
	LogLine string                     `protobuf:"bytes,1,opt,name=log_line,json=logLine,proto3" json:"log_line,omitempty"`
	State   UpdateFirmwareStatus_State `protobuf:"varint,2,opt,name=state,proto3,enum=gnoi.sonic.UpdateFirmwareStatus_State" json:"state,omitempty"`
	// If FAILED, propagate one of the script’s exit codes (126–140).
	ExitCode             int32    `protobuf:"varint,3,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateFirmwareStatus) Reset()         { *m = UpdateFirmwareStatus{} }
func (m *UpdateFirmwareStatus) String() string { return proto.CompactTextString(m) }
func (*UpdateFirmwareStatus) ProtoMessage()    {}
func (*UpdateFirmwareStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff27221f17e4196b, []int{2}
}
func (m *UpdateFirmwareStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateFirmwareStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateFirmwareStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateFirmwareStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateFirmwareStatus.Merge(m, src)
}
func (m *UpdateFirmwareStatus) XXX_Size() int {
	return m.Size()
}
func (m *UpdateFirmwareStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateFirmwareStatus.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateFirmwareStatus proto.InternalMessageInfo

func (m *UpdateFirmwareStatus) GetLogLine() string {
	if m != nil {
		return m.LogLine
	}
	return ""
}

func (m *UpdateFirmwareStatus) GetState() UpdateFirmwareStatus_State {
	if m != nil {
		return m.State
	}
	return UpdateFirmwareStatus_STARTED
}

func (m *UpdateFirmwareStatus) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func init() {
	proto.RegisterEnum("gnoi.sonic.UpdateFirmwareStatus_State", UpdateFirmwareStatus_State_name, UpdateFirmwareStatus_State_value)
	proto.RegisterType((*UpdateFirmwareRequest)(nil), "gnoi.sonic.UpdateFirmwareRequest")
	proto.RegisterType((*FirmwareUpdateParams)(nil), "gnoi.sonic.FirmwareUpdateParams")
	proto.RegisterType((*UpdateFirmwareStatus)(nil), "gnoi.sonic.UpdateFirmwareStatus")
}

func init() { proto.RegisterFile("sonic_upgrade.proto", fileDescriptor_ff27221f17e4196b) }

var fileDescriptor_ff27221f17e4196b = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xcb, 0xce, 0x93, 0x40,
	0x14, 0x66, 0xfe, 0xa6, 0x17, 0x4e, 0xd3, 0x4a, 0xa6, 0x35, 0xa9, 0x9a, 0x20, 0xb2, 0x50, 0x36,
	0xa2, 0xa9, 0x4b, 0xbb, 0x69, 0x81, 0x6a, 0x63, 0x6d, 0x0c, 0x94, 0x8d, 0x2e, 0x26, 0x08, 0x53,
	0x42, 0x42, 0x19, 0x1c, 0xc0, 0xf6, 0x51, 0x7c, 0x24, 0xe3, 0xca, 0x47, 0x30, 0xf5, 0x45, 0x0c,
	0xd0, 0xa6, 0x6d, 0x52, 0xf3, 0xaf, 0x08, 0xdf, 0x39, 0xdf, 0x2d, 0x67, 0x60, 0x90, 0xb1, 0x24,
	0xf2, 0x49, 0x91, 0x86, 0xdc, 0x0b, 0xa8, 0x9e, 0x72, 0x96, 0x33, 0x0c, 0x61, 0xc2, 0x22, 0xbd,
	0x9a, 0xa8, 0x0c, 0x1e, 0xba, 0x69, 0xe0, 0xe5, 0x74, 0x1e, 0xf1, 0xed, 0xce, 0xe3, 0xd4, 0xa6,
	0xdf, 0x0a, 0x9a, 0xe5, 0xf8, 0x03, 0x3c, 0xd8, 0x1c, 0x21, 0x52, 0x54, 0x1b, 0x23, 0xa4, 0x20,
	0xad, 0x3b, 0x56, 0xf4, 0x33, 0x5d, 0x3f, 0xb1, 0x6a, 0x8d, 0x4f, 0x1e, 0xf7, 0xb6, 0xd9, 0x7b,
	0xc1, 0xee, 0x6f, 0xae, 0xf0, 0x99, 0x08, 0x6d, 0x5e, 0xeb, 0xaa, 0x09, 0x0c, 0x6f, 0x91, 0xf0,
	0x8b, 0x0b, 0xbf, 0x8c, 0x15, 0xdc, 0xaf, 0xfd, 0xc4, 0xb3, 0x96, 0x53, 0xa1, 0xf8, 0x25, 0x0c,
	0xea, 0x3c, 0x64, 0x1b, 0x27, 0x7b, 0xe2, 0xa7, 0x71, 0x40, 0x36, 0xbb, 0xd1, 0x9d, 0x82, 0xb4,
	0x8e, 0x2d, 0xd5, 0xa3, 0x8f, 0x71, 0xb2, 0x37, 0xd2, 0x38, 0x98, 0xef, 0xd4, 0x5f, 0x08, 0x86,
	0xd7, 0x0d, 0x9d, 0xdc, 0xcb, 0x8b, 0x0c, 0x3f, 0x82, 0x4e, 0xcc, 0x42, 0x12, 0x47, 0xc9, 0xc9,
	0xa9, 0x1d, 0xb3, 0x70, 0x19, 0x25, 0x14, 0x4f, 0xa0, 0x99, 0xe5, 0x65, 0xe3, 0x52, 0xb4, 0x3f,
	0x7e, 0x7e, 0xd9, 0xf8, 0x96, 0x96, 0x5e, 0x7e, 0xa8, 0x5d, 0x93, 0xf0, 0x13, 0x10, 0xe9, 0x3e,
	0xca, 0x89, 0xcf, 0x02, 0x3a, 0x6a, 0x28, 0x48, 0x6b, 0xda, 0x9d, 0x12, 0x30, 0x58, 0x40, 0xd5,
	0x09, 0x34, 0xab, 0x65, 0xdc, 0x85, 0xb6, 0xb3, 0x9e, 0xda, 0x6b, 0xcb, 0x94, 0x84, 0xf2, 0xc7,
	0x76, 0x57, 0xab, 0xc5, 0xea, 0x9d, 0x84, 0x70, 0x0f, 0x44, 0xc7, 0x35, 0x0c, 0xcb, 0x32, 0x2d,
	0x53, 0xba, 0xc3, 0x00, 0xad, 0xf9, 0x74, 0xb1, 0xb4, 0x4c, 0xa9, 0x31, 0xe6, 0x30, 0x70, 0xca,
	0x14, 0x6e, 0x7d, 0x4f, 0x87, 0xf2, 0xef, 0x91, 0x4f, 0xf1, 0x17, 0xe8, 0x5f, 0xc7, 0xc2, 0xcf,
	0xfe, 0x1f, 0xf9, 0x78, 0xe0, 0xc7, 0xca, 0x7d, 0xad, 0x54, 0x41, 0x43, 0xaf, 0xd1, 0xec, 0xe9,
	0xcf, 0x83, 0x8c, 0x7e, 0x1f, 0x64, 0xf4, 0xe7, 0x20, 0xa3, 0x1f, 0x7f, 0x65, 0xe1, 0x73, 0x4f,
	0x7f, 0xf5, 0xb6, 0xe4, 0x92, 0x8a, 0xfb, 0xb5, 0x55, 0xbd, 0xaa, 0x37, 0xff, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xcf, 0xa8, 0xf1, 0x96, 0x6c, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SonicUpgradeServiceClient is the client API for SonicUpgradeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SonicUpgradeServiceClient interface {
	// Starts a firmware update and streams status/log lines back to the client.
	UpdateFirmware(ctx context.Context, opts ...grpc.CallOption) (SonicUpgradeService_UpdateFirmwareClient, error)
}

type sonicUpgradeServiceClient struct {
	cc *grpc.ClientConn
}

func NewSonicUpgradeServiceClient(cc *grpc.ClientConn) SonicUpgradeServiceClient {
	return &sonicUpgradeServiceClient{cc}
}

func (c *sonicUpgradeServiceClient) UpdateFirmware(ctx context.Context, opts ...grpc.CallOption) (SonicUpgradeService_UpdateFirmwareClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SonicUpgradeService_serviceDesc.Streams[0], "/gnoi.sonic.SonicUpgradeService/UpdateFirmware", opts...)
	if err != nil {
		return nil, err
	}
	x := &sonicUpgradeServiceUpdateFirmwareClient{stream}
	return x, nil
}

type SonicUpgradeService_UpdateFirmwareClient interface {
	Send(*UpdateFirmwareRequest) error
	Recv() (*UpdateFirmwareStatus, error)
	grpc.ClientStream
}

type sonicUpgradeServiceUpdateFirmwareClient struct {
	grpc.ClientStream
}

func (x *sonicUpgradeServiceUpdateFirmwareClient) Send(m *UpdateFirmwareRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sonicUpgradeServiceUpdateFirmwareClient) Recv() (*UpdateFirmwareStatus, error) {
	m := new(UpdateFirmwareStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SonicUpgradeServiceServer is the server API for SonicUpgradeService service.
type SonicUpgradeServiceServer interface {
	// Starts a firmware update and streams status/log lines back to the client.
	UpdateFirmware(SonicUpgradeService_UpdateFirmwareServer) error
}

// UnimplementedSonicUpgradeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSonicUpgradeServiceServer struct {
}

func (*UnimplementedSonicUpgradeServiceServer) UpdateFirmware(srv SonicUpgradeService_UpdateFirmwareServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateFirmware not implemented")
}

func RegisterSonicUpgradeServiceServer(s *grpc.Server, srv SonicUpgradeServiceServer) {
	s.RegisterService(&_SonicUpgradeService_serviceDesc, srv)
}

func _SonicUpgradeService_UpdateFirmware_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SonicUpgradeServiceServer).UpdateFirmware(&sonicUpgradeServiceUpdateFirmwareServer{stream})
}

type SonicUpgradeService_UpdateFirmwareServer interface {
	Send(*UpdateFirmwareStatus) error
	Recv() (*UpdateFirmwareRequest, error)
	grpc.ServerStream
}

type sonicUpgradeServiceUpdateFirmwareServer struct {
	grpc.ServerStream
}

func (x *sonicUpgradeServiceUpdateFirmwareServer) Send(m *UpdateFirmwareStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sonicUpgradeServiceUpdateFirmwareServer) Recv() (*UpdateFirmwareRequest, error) {
	m := new(UpdateFirmwareRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SonicUpgradeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gnoi.sonic.SonicUpgradeService",
	HandlerType: (*SonicUpgradeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateFirmware",
			Handler:       _SonicUpgradeService_UpdateFirmware_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sonic_upgrade.proto",
}

func (m *UpdateFirmwareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateFirmwareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateFirmwareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Request != nil {
		{
			size := m.Request.Size()
			i -= size
			if _, err := m.Request.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateFirmwareRequest_FirmwareUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateFirmwareRequest_FirmwareUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FirmwareUpdate != nil {
		{
			size, err := m.FirmwareUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSonicUpgrade(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *FirmwareUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FirmwareUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FirmwareUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdateMlnxCpldFw {
		i--
		if m.UpdateMlnxCpldFw {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.FirmwareSource) > 0 {
		i -= len(m.FirmwareSource)
		copy(dAtA[i:], m.FirmwareSource)
		i = encodeVarintSonicUpgrade(dAtA, i, uint64(len(m.FirmwareSource)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateFirmwareStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateFirmwareStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateFirmwareStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExitCode != 0 {
		i = encodeVarintSonicUpgrade(dAtA, i, uint64(m.ExitCode))
		i--
		dAtA[i] = 0x18
	}
	if m.State != 0 {
		i = encodeVarintSonicUpgrade(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LogLine) > 0 {
		i -= len(m.LogLine)
		copy(dAtA[i:], m.LogLine)
		i = encodeVarintSonicUpgrade(dAtA, i, uint64(len(m.LogLine)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSonicUpgrade(dAtA []byte, offset int, v uint64) int {
	offset -= sovSonicUpgrade(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpdateFirmwareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		n += m.Request.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateFirmwareRequest_FirmwareUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FirmwareUpdate != nil {
		l = m.FirmwareUpdate.Size()
		n += 1 + l + sovSonicUpgrade(uint64(l))
	}
	return n
}
func (m *FirmwareUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FirmwareSource)
	if l > 0 {
		n += 1 + l + sovSonicUpgrade(uint64(l))
	}
	if m.UpdateMlnxCpldFw {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateFirmwareStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LogLine)
	if l > 0 {
		n += 1 + l + sovSonicUpgrade(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovSonicUpgrade(uint64(m.State))
	}
	if m.ExitCode != 0 {
		n += 1 + sovSonicUpgrade(uint64(m.ExitCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSonicUpgrade(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSonicUpgrade(x uint64) (n int) {
	return sovSonicUpgrade(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpdateFirmwareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonicUpgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateFirmwareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateFirmwareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirmwareUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonicUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSonicUpgrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSonicUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FirmwareUpdateParams{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &UpdateFirmwareRequest_FirmwareUpdate{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSonicUpgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSonicUpgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FirmwareUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonicUpgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FirmwareUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FirmwareUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirmwareSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonicUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSonicUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSonicUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirmwareSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMlnxCpldFw", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonicUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateMlnxCpldFw = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSonicUpgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSonicUpgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateFirmwareStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSonicUpgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateFirmwareStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateFirmwareStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogLine", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonicUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSonicUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSonicUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogLine = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonicUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= UpdateFirmwareStatus_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitCode", wireType)
			}
			m.ExitCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSonicUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExitCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSonicUpgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSonicUpgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSonicUpgrade(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSonicUpgrade
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSonicUpgrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSonicUpgrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSonicUpgrade
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSonicUpgrade
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSonicUpgrade
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSonicUpgrade        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSonicUpgrade          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSonicUpgrade = fmt.Errorf("proto: unexpected end of group")
)
