// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dial_out.proto

/*
Package gnmi_sonic is a generated protocol buffer package.

It is generated from these files:

	dial_out.proto
	sonic_internal.proto
	sonic.proto

It has these top-level messages:

	PublishResponse
	Value
	SupportedBundleVersions
	BundleVersion
*/
package gnmi_sonic

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import gnmi "github.com/openconfig/gnmi/proto/gnmi"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PublishResponse struct {
	Timestamp int64      `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Prefix    *gnmi.Path `protobuf:"bytes,2,opt,name=prefix" json:"prefix,omitempty"`
	// An alias for the path specified in the prefix field.
	// Reference: gNMI Specification Section 2.4.2
	Alias string       `protobuf:"bytes,3,opt,name=alias" json:"alias,omitempty"`
	Path  []*gnmi.Path `protobuf:"bytes,4,rep,name=path" json:"path,omitempty"`
}

func (m *PublishResponse) Reset()                    { *m = PublishResponse{} }
func (m *PublishResponse) String() string            { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()               {}
func (*PublishResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PublishResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *PublishResponse) GetPrefix() *gnmi.Path {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *PublishResponse) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *PublishResponse) GetPath() []*gnmi.Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func init() {
	proto.RegisterType((*PublishResponse)(nil), "gnmi.sonic.PublishResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GNMIDialOut service

type GNMIDialOutClient interface {
	// Publish allows the target to send telemetry updates (in the form of
	// SubscribeResponse messaages, which have the same semantics as in the
	// gNMI Subscribe RPC, to a client. The client may optionally return the
	// PublishResponse message in response to the dial-out connection from the
	// target as acknowledgement to the SubscribeResponse message
	//
	// The configuration of subscriptions associated with the publish RPC may
	// be through the OpenConfig telemetry configuration and operational state
	// model:
	// https://github.com/openconfig/public/blob/master/release/models/telemetry/openconfig-telemetry.yang
	Publish(ctx context.Context, opts ...grpc.CallOption) (GNMIDialOut_PublishClient, error)
}

type gNMIDialOutClient struct {
	cc *grpc.ClientConn
}

func NewGNMIDialOutClient(cc *grpc.ClientConn) GNMIDialOutClient {
	return &gNMIDialOutClient{cc}
}

func (c *gNMIDialOutClient) Publish(ctx context.Context, opts ...grpc.CallOption) (GNMIDialOut_PublishClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GNMIDialOut_serviceDesc.Streams[0], c.cc, "/gnmi.sonic.gNMIDialOut/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &gNMIDialOutPublishClient{stream}
	return x, nil
}

type GNMIDialOut_PublishClient interface {
	Send(*gnmi.SubscribeResponse) error
	Recv() (*PublishResponse, error)
	grpc.ClientStream
}

type gNMIDialOutPublishClient struct {
	grpc.ClientStream
}

func (x *gNMIDialOutPublishClient) Send(m *gnmi.SubscribeResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gNMIDialOutPublishClient) Recv() (*PublishResponse, error) {
	m := new(PublishResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GNMIDialOut service

type GNMIDialOutServer interface {
	// Publish allows the target to send telemetry updates (in the form of
	// SubscribeResponse messaages, which have the same semantics as in the
	// gNMI Subscribe RPC, to a client. The client may optionally return the
	// PublishResponse message in response to the dial-out connection from the
	// target as acknowledgement to the SubscribeResponse message
	//
	// The configuration of subscriptions associated with the publish RPC may
	// be through the OpenConfig telemetry configuration and operational state
	// model:
	// https://github.com/openconfig/public/blob/master/release/models/telemetry/openconfig-telemetry.yang
	Publish(GNMIDialOut_PublishServer) error
}

func RegisterGNMIDialOutServer(s *grpc.Server, srv GNMIDialOutServer) {
	s.RegisterService(&_GNMIDialOut_serviceDesc, srv)
}

func _GNMIDialOut_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GNMIDialOutServer).Publish(&gNMIDialOutPublishServer{stream})
}

type GNMIDialOut_PublishServer interface {
	Send(*PublishResponse) error
	Recv() (*gnmi.SubscribeResponse, error)
	grpc.ServerStream
}

type gNMIDialOutPublishServer struct {
	grpc.ServerStream
}

func (x *gNMIDialOutPublishServer) Send(m *PublishResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gNMIDialOutPublishServer) Recv() (*gnmi.SubscribeResponse, error) {
	m := new(gnmi.SubscribeResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GNMIDialOut_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gnmi.sonic.gNMIDialOut",
	HandlerType: (*GNMIDialOutServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _GNMIDialOut_Publish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dial_out.proto",
}

func init() { proto.RegisterFile("dial_out.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0xdf, 0x4a, 0xc3, 0x30,
	0x18, 0xc5, 0x89, 0x9d, 0x93, 0x7d, 0x03, 0x85, 0x20, 0x58, 0xa6, 0x48, 0xd9, 0x55, 0xaf, 0xd2,
	0x31, 0x1f, 0x41, 0x6f, 0xbc, 0x50, 0x47, 0x7c, 0x00, 0x49, 0x6a, 0xd6, 0x7e, 0xd0, 0xfc, 0xa1,
	0xf9, 0x02, 0xbe, 0x82, 0x6f, 0x2d, 0xa6, 0x1b, 0x83, 0xdd, 0xe5, 0x9c, 0x9c, 0xf3, 0x71, 0x7e,
	0x70, 0xfd, 0x8d, 0x6a, 0xf8, 0xf2, 0x89, 0x44, 0x18, 0x3d, 0x79, 0x0e, 0x9d, 0xb3, 0x28, 0xa2,
	0x77, 0xd8, 0xae, 0x36, 0x1d, 0x52, 0x9f, 0xb4, 0x68, 0xbd, 0x6d, 0x7c, 0x30, 0xae, 0xf5, 0x6e,
	0x8f, 0x5d, 0xf3, 0x9f, 0x68, 0x72, 0x7a, 0x7a, 0xe6, 0x46, 0xd6, 0xeb, 0x5f, 0x06, 0x37, 0xbb,
	0xa4, 0x07, 0x8c, 0xbd, 0x34, 0x31, 0x78, 0x17, 0x0d, 0x7f, 0x80, 0x05, 0xa1, 0x35, 0x91, 0x94,
	0x0d, 0x25, 0xab, 0x58, 0x5d, 0xc8, 0x93, 0xc1, 0xd7, 0x30, 0x0f, 0xa3, 0xd9, 0xe3, 0x4f, 0x79,
	0x51, 0xb1, 0x7a, 0xb9, 0x05, 0x91, 0xcf, 0xed, 0x14, 0xf5, 0xf2, 0xf0, 0xc3, 0x6f, 0xe1, 0x52,
	0x0d, 0xa8, 0x62, 0x59, 0x54, 0xac, 0x5e, 0xc8, 0x49, 0xf0, 0x47, 0x98, 0x05, 0x45, 0x7d, 0x39,
	0xab, 0x8a, 0xb3, 0x5e, 0xf6, 0xb7, 0x12, 0x96, 0xdd, 0xfb, 0xdb, 0xeb, 0x0b, 0xaa, 0xe1, 0x23,
	0x11, 0x7f, 0x86, 0xab, 0xc3, 0x32, 0x7e, 0x37, 0x65, 0x3f, 0x93, 0x8e, 0xed, 0x88, 0xda, 0x1c,
	0xa7, 0xae, 0xee, 0xc5, 0x89, 0x5e, 0x9c, 0x71, 0xd4, 0x6c, 0xc3, 0xf4, 0x3c, 0x63, 0x3e, 0xfd,
	0x05, 0x00, 0x00, 0xff, 0xff, 0x19, 0x9a, 0x29, 0xba, 0x36, 0x01, 0x00, 0x00,
}
