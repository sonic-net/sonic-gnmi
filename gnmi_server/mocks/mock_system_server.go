// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openconfig/gnoi/system (interfaces: SystemServer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	system "github.com/openconfig/gnoi/system"
	reflect "reflect"
)

// MockSystemServer is a mock of SystemServer interface
type MockSystemServer struct {
	ctrl     *gomock.Controller
	recorder *MockSystemServerMockRecorder
}

// MockSystemServerMockRecorder is the mock recorder for MockSystemServer
type MockSystemServerMockRecorder struct {
	mock *MockSystemServer
}

// NewMockSystemServer creates a new mock instance
func NewMockSystemServer(ctrl *gomock.Controller) *MockSystemServer {
	mock := &MockSystemServer{ctrl: ctrl}
	mock.recorder = &MockSystemServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSystemServer) EXPECT() *MockSystemServerMockRecorder {
	return m.recorder
}

// CancelReboot mocks base method
func (m *MockSystemServer) CancelReboot(arg0 context.Context, arg1 *system.CancelRebootRequest) (*system.CancelRebootResponse, error) {
	ret := m.ctrl.Call(m, "CancelReboot", arg0, arg1)
	ret0, _ := ret[0].(*system.CancelRebootResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelReboot indicates an expected call of CancelReboot
func (mr *MockSystemServerMockRecorder) CancelReboot(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelReboot", reflect.TypeOf((*MockSystemServer)(nil).CancelReboot), arg0, arg1)
}

// KillProcess mocks base method
func (m *MockSystemServer) KillProcess(arg0 context.Context, arg1 *system.KillProcessRequest) (*system.KillProcessResponse, error) {
	ret := m.ctrl.Call(m, "KillProcess", arg0, arg1)
	ret0, _ := ret[0].(*system.KillProcessResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KillProcess indicates an expected call of KillProcess
func (mr *MockSystemServerMockRecorder) KillProcess(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KillProcess", reflect.TypeOf((*MockSystemServer)(nil).KillProcess), arg0, arg1)
}

// Ping mocks base method
func (m *MockSystemServer) Ping(arg0 *system.PingRequest, arg1 system.System_PingServer) error {
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping
func (mr *MockSystemServerMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockSystemServer)(nil).Ping), arg0, arg1)
}

// Reboot mocks base method
func (m *MockSystemServer) Reboot(arg0 context.Context, arg1 *system.RebootRequest) (*system.RebootResponse, error) {
	ret := m.ctrl.Call(m, "Reboot", arg0, arg1)
	ret0, _ := ret[0].(*system.RebootResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reboot indicates an expected call of Reboot
func (mr *MockSystemServerMockRecorder) Reboot(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reboot", reflect.TypeOf((*MockSystemServer)(nil).Reboot), arg0, arg1)
}

// RebootStatus mocks base method
func (m *MockSystemServer) RebootStatus(arg0 context.Context, arg1 *system.RebootStatusRequest) (*system.RebootStatusResponse, error) {
	ret := m.ctrl.Call(m, "RebootStatus", arg0, arg1)
	ret0, _ := ret[0].(*system.RebootStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebootStatus indicates an expected call of RebootStatus
func (mr *MockSystemServerMockRecorder) RebootStatus(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootStatus", reflect.TypeOf((*MockSystemServer)(nil).RebootStatus), arg0, arg1)
}

// SetPackage mocks base method
func (m *MockSystemServer) SetPackage(arg0 system.System_SetPackageServer) error {
	ret := m.ctrl.Call(m, "SetPackage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPackage indicates an expected call of SetPackage
func (mr *MockSystemServerMockRecorder) SetPackage(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPackage", reflect.TypeOf((*MockSystemServer)(nil).SetPackage), arg0)
}

// SwitchControlProcessor mocks base method
func (m *MockSystemServer) SwitchControlProcessor(arg0 context.Context, arg1 *system.SwitchControlProcessorRequest) (*system.SwitchControlProcessorResponse, error) {
	ret := m.ctrl.Call(m, "SwitchControlProcessor", arg0, arg1)
	ret0, _ := ret[0].(*system.SwitchControlProcessorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwitchControlProcessor indicates an expected call of SwitchControlProcessor
func (mr *MockSystemServerMockRecorder) SwitchControlProcessor(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchControlProcessor", reflect.TypeOf((*MockSystemServer)(nil).SwitchControlProcessor), arg0, arg1)
}

// Time mocks base method
func (m *MockSystemServer) Time(arg0 context.Context, arg1 *system.TimeRequest) (*system.TimeResponse, error) {
	ret := m.ctrl.Call(m, "Time", arg0, arg1)
	ret0, _ := ret[0].(*system.TimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Time indicates an expected call of Time
func (mr *MockSystemServerMockRecorder) Time(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Time", reflect.TypeOf((*MockSystemServer)(nil).Time), arg0, arg1)
}

// Traceroute mocks base method
func (m *MockSystemServer) Traceroute(arg0 *system.TracerouteRequest, arg1 system.System_TracerouteServer) error {
	ret := m.ctrl.Call(m, "Traceroute", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Traceroute indicates an expected call of Traceroute
func (mr *MockSystemServerMockRecorder) Traceroute(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Traceroute", reflect.TypeOf((*MockSystemServer)(nil).Traceroute), arg0, arg1)
}

// mustEmbedUnimplementedSystemServer mocks base method
func (m *MockSystemServer) mustEmbedUnimplementedSystemServer() {
	m.ctrl.Call(m, "mustEmbedUnimplementedSystemServer")
}

// mustEmbedUnimplementedSystemServer indicates an expected call of mustEmbedUnimplementedSystemServer
func (mr *MockSystemServerMockRecorder) mustEmbedUnimplementedSystemServer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSystemServer", reflect.TypeOf((*MockSystemServer)(nil).mustEmbedUnimplementedSystemServer))
}
