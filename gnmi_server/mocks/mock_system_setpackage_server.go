// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openconfig/gnoi/system (interfaces: System_SetPackageServer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	system "github.com/openconfig/gnoi/system"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockSystem_SetPackageServer is a mock of System_SetPackageServer interface
type MockSystem_SetPackageServer struct {
	ctrl     *gomock.Controller
	recorder *MockSystem_SetPackageServerMockRecorder
}

// MockSystem_SetPackageServerMockRecorder is the mock recorder for MockSystem_SetPackageServer
type MockSystem_SetPackageServerMockRecorder struct {
	mock *MockSystem_SetPackageServer
}

// NewMockSystem_SetPackageServer creates a new mock instance
func NewMockSystem_SetPackageServer(ctrl *gomock.Controller) *MockSystem_SetPackageServer {
	mock := &MockSystem_SetPackageServer{ctrl: ctrl}
	mock.recorder = &MockSystem_SetPackageServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSystem_SetPackageServer) EXPECT() *MockSystem_SetPackageServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockSystem_SetPackageServer) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockSystem_SetPackageServerMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSystem_SetPackageServer)(nil).Context))
}

// Recv mocks base method
func (m *MockSystem_SetPackageServer) Recv() (*system.SetPackageRequest, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*system.SetPackageRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockSystem_SetPackageServerMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSystem_SetPackageServer)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockSystem_SetPackageServer) RecvMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockSystem_SetPackageServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSystem_SetPackageServer)(nil).RecvMsg), arg0)
}

// SendAndClose mocks base method
func (m *MockSystem_SetPackageServer) SendAndClose(arg0 *system.SetPackageResponse) error {
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose
func (mr *MockSystem_SetPackageServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockSystem_SetPackageServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method
func (m *MockSystem_SetPackageServer) SendHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockSystem_SetPackageServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSystem_SetPackageServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockSystem_SetPackageServer) SendMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockSystem_SetPackageServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSystem_SetPackageServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockSystem_SetPackageServer) SetHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockSystem_SetPackageServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSystem_SetPackageServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockSystem_SetPackageServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockSystem_SetPackageServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSystem_SetPackageServer)(nil).SetTrailer), arg0)
}
