// Code generated by MockGen. DO NOT EDIT.
// Source: containerz/containerz.pb.go

// Package containerz is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockisDeployRequest_Request is a mock of isDeployRequest_Request interface.
type MockisDeployRequest_Request struct {
	ctrl     *gomock.Controller
	recorder *MockisDeployRequest_RequestMockRecorder
}

// MockisDeployRequest_RequestMockRecorder is the mock recorder for MockisDeployRequest_Request.
type MockisDeployRequest_RequestMockRecorder struct {
	mock *MockisDeployRequest_Request
}

// NewMockisDeployRequest_Request creates a new mock instance.
func NewMockisDeployRequest_Request(ctrl *gomock.Controller) *MockisDeployRequest_Request {
	mock := &MockisDeployRequest_Request{ctrl: ctrl}
	mock.recorder = &MockisDeployRequest_RequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisDeployRequest_Request) EXPECT() *MockisDeployRequest_RequestMockRecorder {
	return m.recorder
}

// isDeployRequest_Request mocks base method.
func (m *MockisDeployRequest_Request) isDeployRequest_Request() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isDeployRequest_Request")
}

// isDeployRequest_Request indicates an expected call of isDeployRequest_Request.
func (mr *MockisDeployRequest_RequestMockRecorder) isDeployRequest_Request() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isDeployRequest_Request", reflect.TypeOf((*MockisDeployRequest_Request)(nil).isDeployRequest_Request))
}

// MockisDeployResponse_Response is a mock of isDeployResponse_Response interface.
type MockisDeployResponse_Response struct {
	ctrl     *gomock.Controller
	recorder *MockisDeployResponse_ResponseMockRecorder
}

// MockisDeployResponse_ResponseMockRecorder is the mock recorder for MockisDeployResponse_Response.
type MockisDeployResponse_ResponseMockRecorder struct {
	mock *MockisDeployResponse_Response
}

// NewMockisDeployResponse_Response creates a new mock instance.
func NewMockisDeployResponse_Response(ctrl *gomock.Controller) *MockisDeployResponse_Response {
	mock := &MockisDeployResponse_Response{ctrl: ctrl}
	mock.recorder = &MockisDeployResponse_ResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisDeployResponse_Response) EXPECT() *MockisDeployResponse_ResponseMockRecorder {
	return m.recorder
}

// isDeployResponse_Response mocks base method.
func (m *MockisDeployResponse_Response) isDeployResponse_Response() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isDeployResponse_Response")
}

// isDeployResponse_Response indicates an expected call of isDeployResponse_Response.
func (mr *MockisDeployResponse_ResponseMockRecorder) isDeployResponse_Response() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isDeployResponse_Response", reflect.TypeOf((*MockisDeployResponse_Response)(nil).isDeployResponse_Response))
}

// MockisStartResponse_Response is a mock of isStartResponse_Response interface.
type MockisStartResponse_Response struct {
	ctrl     *gomock.Controller
	recorder *MockisStartResponse_ResponseMockRecorder
}

// MockisStartResponse_ResponseMockRecorder is the mock recorder for MockisStartResponse_Response.
type MockisStartResponse_ResponseMockRecorder struct {
	mock *MockisStartResponse_Response
}

// NewMockisStartResponse_Response creates a new mock instance.
func NewMockisStartResponse_Response(ctrl *gomock.Controller) *MockisStartResponse_Response {
	mock := &MockisStartResponse_Response{ctrl: ctrl}
	mock.recorder = &MockisStartResponse_ResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisStartResponse_Response) EXPECT() *MockisStartResponse_ResponseMockRecorder {
	return m.recorder
}

// isStartResponse_Response mocks base method.
func (m *MockisStartResponse_Response) isStartResponse_Response() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isStartResponse_Response")
}

// isStartResponse_Response indicates an expected call of isStartResponse_Response.
func (mr *MockisStartResponse_ResponseMockRecorder) isStartResponse_Response() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isStartResponse_Response", reflect.TypeOf((*MockisStartResponse_Response)(nil).isStartResponse_Response))
}
